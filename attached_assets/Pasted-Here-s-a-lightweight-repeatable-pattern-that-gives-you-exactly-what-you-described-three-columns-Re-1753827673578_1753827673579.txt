Here’s a lightweight, repeatable pattern that gives you exactly what you described—three columns (Ref ▸ Main ▸ X-Refs) that always fit on-screen in portrait, while keeping your existing centred-table behaviour in landscape. It’s 100 % CSS-first, with a tiny React hook to keep the numbers perfectly in sync on every resize / orientation-change.

⸻

1 · CSS: two media queries, one custom-property

/* ------------- default (landscape ≥ portrait width) ------------- */
:root {
  --ref-w: 72px;          /* tweak to taste – fixed */
  --col-w: auto;          /* you already size the other cols in desktop */
}

.bibleTable {
  display: grid;
  grid-auto-columns: max-content; /* keeps desktop sizing logic */
  grid-auto-flow: column;
}

/* ------------- adaptive portrait rule ------------- */
@media (orientation: portrait) {
  :root {
    /* JS will update --vw-free in real time (see hook below) */
    --main-xref-w: calc(var(--vw-free) / 2);
  }

  .bibleTable {
    /* three columns locked, rest overflow horizontally */
    grid-auto-columns: var(--main-xref-w);
    grid-template-columns:
      var(--ref-w)          /* Ref column – fixed width   */
      var(--main-xref-w)    /* Main translation – flex    */
      var(--main-xref-w)    /* Cross reference – flex     */
      repeat(auto-fill, max-content); /* any other columns */
    overflow-x: auto;       /* scrollbar for “extra” cols */
  }
}

Why it works
	•	Outside the portrait media query nothing changes—your centred desktop table behaves exactly as before.
	•	Inside portrait we pin column 1 at --ref-w and tell CSS Grid to give columns 2 & 3 the same computed width (--main-xref-w). Every other column rolls out to the right, creating natural horizontal overflow.

⸻

2 · React hook: keep --vw-free accurate on every resize/orientation change

import { useEffect } from "react";

export function useAdaptiveWidths() {
  useEffect(() => {
    const root = document.documentElement;
    function setWidths() {
      const vw = window.innerWidth;            // full viewport width
      const refW = 72;                         // keep in sync with --ref-w
      root.style.setProperty("--vw-free", `${vw - refW}px`);
    }

    setWidths();                               // run once on mount
    window.addEventListener("resize", setWidths);
    window.addEventListener("orientationchange", setWidths);
    return () => {
      window.removeEventListener("resize", setWidths);
      window.removeEventListener("orientationchange", setWidths);
    };
  }, []);
}

	•	Drop useAdaptiveWidths() once high in your component tree (e.g. BiblePage).
	•	Because the value is stored in a CSS custom property, you never re-render rows—only layout recalculates, which is cheap.

⸻

3 · Putting it together

export default function BiblePage() {
  useAdaptiveWidths();        // handles dynamic sizing
  return (
    <div className="bibleTable">
      {/* ref col, main col, x-ref col, extra… */}
    </div>
  );
}



⸻

A few practical tweaks

Need	Tweak
Visual balance if verses run long	Add overflow-y:auto with a fixed max-height on the two flexible columns so each cell scrolls vertically without pushing row height.
Snap scrolling for extra columns	Add scroll-snap-type: x mandatory on .bibleTable and scroll-snap-align: start on each column to give users a neat “page” feel when swiping.
Performance on very narrow phones	Lower --ref-w a bit (e.g. 60 px) or switch to an icon-only ref column under 360 px.



⸻

Why this avoids the “left-hugging” problem in landscape

The portrait rule is activated only when orientation: portrait. As soon as the device flips to landscape the media query drops, the grid reverts to your desktop sizing, and your existing centring logic (e.g. margin-inline:auto) keeps the table centred until it truly outgrows the viewport—then the natural overflow-scroll bar appears, exactly as you wanted.

Feel free to slot the constants (refW, media-query breakpoint, etc.) into your existing layout constants file so everything stays single-source-of-truth. Let me know if you’d like a quick live CodeSandbox snippet to experiment with!