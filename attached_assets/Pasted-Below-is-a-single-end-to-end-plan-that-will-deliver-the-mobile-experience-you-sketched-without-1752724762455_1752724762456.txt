Below is a **single, end‑to‑end plan** that will deliver the mobile experience you sketched, without ever stacking columns, while also fixing the two remaining functional bugs:

---

## 1  Functional fixes (desktop & mobile)

### 1.1 Stop the invisible overlay blocking the cross‑ref link

*Root cause*: the parent row still has `onClick` for expansion; Safari sends the event to the row before the inner link.

```tsx
/* CrossReferencesCell.tsx */
const handleClick = (e: React.MouseEvent) => {
  e.stopPropagation();          // prevents row’s onClick
  setAnchorByRef(ref);          // jump anchor
};
…
<button onClick={handleClick} …>
```

### 1.2 Remove empty vertical gap inside the cell

`verseText` is sometimes undefined → you render nothing.
Add fallback:

```tsx
const verseText = getVerseText(ref, main) ?? "";  // never undefined
```

---

## 2  Performance: make verse text appear immediately

Inside `useSliceDataLoader`:

```ts
useEffect(() => {
  ensureTranslationLoaded(main);         // fetch main if not cached
  …
}, [sliceStart, main]);
```

This guarantees the main translation is in cache before cross‑ref cells ask for it; they will fill in under 200 ms instead of “a couple minutes”.

---

## 3  Mobile design – “one‑finger dual‑axis scroll”

### 3.1 Principle

* Keep the table a **single scroll container** (`overflow‑auto`).
* Enable horizontal scroll **only when the primary gesture direction is X‑dominant**.

### 3.2 Implementation in 10 LoC

```css
/* index.css */
@media (max-width: 640px) {
  .bible-table-wrapper {
    touch-action: pan-y;      /* browser handles vertical */
  }
}
```

```tsx
/* VirtualBibleTable.tsx */
const wrapperRef = useRef<HTMLDivElement>(null);

useEffect(() => {
  if (!wrapperRef.current) return;

  let startX = 0, startY = 0;

  const onTouchStart = (e: TouchEvent) => {
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
  };

  const onTouchMove = (e: TouchEvent) => {
    const dx = Math.abs(e.touches[0].clientX - startX);
    const dy = Math.abs(e.touches[0].clientY - startY);
    if (dx > dy * 1.2) {               // X‑dominant
      wrapperRef.current!.style.touchAction = "pan-x";
    } else {
      wrapperRef.current!.style.touchAction = "pan-y";
    }
  };

  const onTouchEnd = () => {
    wrapperRef.current!.style.touchAction = "pan-y";
  };

  wrapperRef.current.addEventListener("touchstart", onTouchStart);
  wrapperRef.current.addEventListener("touchmove",  onTouchMove);
  wrapperRef.current.addEventListener("touchend",   onTouchEnd);
  return () => {
    wrapperRef.current?.removeEventListener("touchstart", onTouchStart);
    wrapperRef.current?.removeEventListener("touchmove",  onTouchMove);
    wrapperRef.current?.removeEventListener("touchend",   onTouchEnd);
  };
}, []);
```

*Result*:
– Normal downward flick scrolls vertically.
– When the user intentionally drags sideways (≥ 20 % more X than Y) we switch to `pan‑x`; the page locks vertical scrolling until finger lifts, giving a smooth horizontal glide.
– Equal X/Y resolves to vertical by the 1.2 factor.

### 3.3 Column widths

```css
@media (max-width: 640px) {
  .col-ref   { width: 64px;  }   /* narrow reference */
  .col-main  { width: 420px; }   /* main translation */
  .col-cross { width: 420px; }   /* cross‑refs */
}
```

No stacking; horizontal scroll bar appears only when columns exceed viewport.

---

## 4  Header bar (mobile)

* **Search button** → magnifying‑glass icon; input opens in dialog.
* **One auth button** → `"merge the sign in and sign up button to a "sign in/up" button with a beautifully rendering of both modals loading in one at the same time side by side when clicked
* Hide verse shortcuts under `sm`.

All done with existing Tailwind breakpoints (`sm:hidden`, `sm:flex`).

---

## 5  Prophecy columns (next feature)

Once cross‑ref UX is solid we add *P / F / V*:

```tsx
const count = prophecies[verse.reference]?.[type]?.length ?? 0;
return (
  <div className="w-14 text-center">
    {count > 0 && (
      <span className={`inline-block h-2.5 w-2.5 rounded-full ${dotColor[type]}`} />
    )}
  </div>
);
```

Tooltip on hover/tap lists references.

---


   * vertical scroll ✅
   * sideways drag scrolls columns ✅
   * tapping a cross‑ref jumps anchor ✅


