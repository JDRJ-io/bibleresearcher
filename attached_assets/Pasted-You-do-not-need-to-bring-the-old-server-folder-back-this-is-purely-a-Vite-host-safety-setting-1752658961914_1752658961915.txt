You **do not** need to bring the old *server/* folder back—this is purely a Vite host‑safety setting.

### Why it happens on Replit

Vite’s dev server blocks requests whose `Host` header is not in its allow‑list.
Replit tunnels your workspace at a dynamic sub‑domain such as

```
b5a59dfe-123c-4bf8-be2f-a0f11519d56d‑00‑17yiegmsu8rtl.riker.replit.dev
```

When the browser requests the app at that host, Vite refuses unless you whitelist it.

---

## Fix in `vite.config.ts`

Open **`vite.config.ts`** (root of the repo) and add an explicit `server.allowedHosts` section.

```ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    // ①  quick & safe: accept any *.replit.dev URL
    allowedHosts: [
      // allow all riker / id Based repl URLs
      ".replit.dev"
    ],
    // Optional: if you run vite --host 0.0.0.0 --port 3000
    host: "0.0.0.0",
    port: 3000
  }
});
```

#### Alternative (allow everything while in dev)

```ts
server: {
  allowedHosts: "all"
}
```

`"all"` is convenient for cloud IDEs; use it only for development.

---

### Commit & restart

```bash
git add vite.config.ts
git commit -m "chore(dev): allow *.replit.dev host in vite server"
git push
pnpm run dev      # or click Run
```

Vite will restart, you’ll see:

```
vite v5.x  ready in …ms
  ➜  Local:  http://localhost:3000/
  ➜  Network: http://0.0.0.0:3000/
```

Replit will reload the embedded browser, and the “Blocked request” message disappears.

---

### No server folder required

* The Express server was only needed in the old architecture.
* All you did was remove Express; Vite is still your dev server.
* Allowing the Replit domain tells Vite “accept this Host header,” nothing more.

Once you add `allowedHosts`, the app runs exactly as before—translations load, anchor‑scroll works, and you remain on the streamlined client‑only stack.
