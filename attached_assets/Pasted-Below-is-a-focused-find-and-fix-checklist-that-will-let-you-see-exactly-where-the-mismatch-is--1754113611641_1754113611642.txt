Below is a focused “find-and-fix” checklist that will let you see exactly **where** the mismatch is coming from and then eliminate it in one pass. Feel free to work through it in order; each step builds on the previous one.

---

### 1. Confirm the real numbers first

Open DevTools, select the **Ref header cell** (`th`) and run in the console:

```js
getComputedStyle($0).width
getComputedStyle($0).getPropertyValue('--w-ref')
getComputedStyle($0).getPropertyValue('--column-width-mult')
```

Then do the same for any **Ref data cell** (`td`).
If the numbers differ, you already know the culprit is in variable resolution / cascade; if the numbers match but the visual size is still off, jump to Step 4.

---

### 2. Common causes when the variables differ

| Symptom                                                                                          | Typical root cause                                                                                                                             | Quick check                                                                                                            |
| ------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
| **Header width smaller** but `--w-ref` identical in both elements                                | Header’s inline `style` was **baked to px** once in React (on first render) while the data cell still uses live CSS vars                       | Inspect the header node → if you see `style="width:81px"` instead of `style="width:var(--w-ref)"` you’ve found it      |
| `--column-width-mult` = `1` in header but = `1.25` in data                                       | Header rendered in a different subtree that never received the CSS rule which sets the multiplier (e.g., scoped CSS module or later style tag) | In DevTools, “Styles” tab → look at the rule that sets `--column-width-mult`; confirm it actually applies to `<thead>` |
| Header reads the *mobile* media-query value (3 rem) while rows read the *tablet* value (3.5 rem) | Sticky header lives in a fixed/portal container outside the media-query scope                                                                  | Check the DOM: if header is portalled, its root may not inherit the same media-query block                             |

---

### 3. One-line fix that removes *all* of the above

Define one final variable and use it everywhere:

```css
/* index.css (after all other var definitions) --------------*/
:root {
  --ref-col-width: calc(var(--w-ref) * var(--column-width-mult));
}
```

Then, in both header and data cells, **only** set:

```jsx
style={{ width: 'var(--ref-col-width)' }}
```

Because both elements now point to the *same* live variable, any future changes to `--w-ref` **or** `--column-width-mult` propagate automatically—no more stale inline widths.

---

### 4. Same number but still different size?

That means layout chrome is sneaking in extra pixels.

1. **Box-sizing mismatch**

   ```css
   th.ref, td.ref { box-sizing: border-box; }
   ```

   If the header is `content-box` and the cell is `border-box`, borders/padding enlarge the cell only.

2. **Padding / border / border-collapse**
   In table mode, a 1 px `border-spacing` doubles (left + right).

   ```css
   table { border-collapse: collapse; }
   ```

3. **Sticky scroll bar shim**
   A sticky header often sits above a vertical scrollbar; that 17 px “gutter” shifts the header cell grid. Confirm by toggling the scrollbar or forcing `overflow-y: hidden` in DevTools.

---

### 5. Make the fix future-proof

```css
/* Re-usable utility class ----------------------------------*/
.ref-col {
  width: var(--ref-col-width);
  min-width: var(--ref-col-width);
  max-width: var(--ref-col-width);
  box-sizing: border-box;
}

/* Apply to both header & cells -----------------------------*/
<th className="ref-col">#</th>
<td className="ref-col">{index}</td>
```

*One* class, *one* variable—now a single tweak (changing `--w-ref` or the multiplier) realigns everything everywhere.

---

### 6. Quick smoke test

1. Resize the browser from ≥ 1024 px down to ≤ 480 px.
2. Change `--column-width-mult` in DevTools to 1.3.
3. Watch header & rows stay perfectly locked—if they diverge, the mismatch is still higher up the cascade.

---

#### TL;DR

Most often the mismatch is a stale inline width on the header or the header living outside the media-query scope. Standardise on **one final variable** (`--ref-col-width`) and point *every* element at it; then verify `box-sizing` and borders. Ten minutes in DevTools will show you the exact line that’s out of sync.
