That little “sliver” almost always comes from one of three things, and all three live outside the logic of your virtual-row renderer:

| #                                                         | What usually causes a 2-4 px gap on the **left edge**                                                                                                                                                                                                               | Quick way to confirm                                                                                                 | Fix (one-liner) |
| --------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | --------------- |
| 1                                                         | **Table border-spacing** – every `<table>` defaults to `border-collapse: separate` with `border-spacing: 2px` on *all four* sides. Because your header is a *second* table stacked on top of the virtual body, its own spacing adds another 2 px, so you see ±4 px. | In DevTools, select `.vTable` or `.headerTable` and look at *Computed → Layout → border-spacing* (you’ll see “2 2”). | \`\`\`css       |
| .headerTable,                                             |                                                                                                                                                                                                                                                                     |                                                                                                                      |                 |
| .vTable { border-collapse: collapse; border-spacing: 0; } |                                                                                                                                                                                                                                                                     |                                                                                                                      |                 |

````|
| 2 | **Padding/margin on the outer wrapper** – sometimes a framework component (e.g. a `Card`, `Container`, or your `contextLensPane`) injects `padding-left: 4px`. | In DevTools, hover the wrapper and look for the orange/green overlay on the left. | ```css
#verseTableViewport,
#headerViewport { margin-left: 0; padding-left: 0; }
``` |
| 3 | **A 1 px border on the nav rail + 1–3 px “gutter” you added for touch targets** – easy to forget when the nav is black. | Temporarily set `.sideNav { background: hotpink; }`. If the whole hot-pink bar grows by the gap width, it’s this. | Remove / shrink the gutter, or offset the header by the same value (`left: var(--side-nav-width)` in both places). |

---

### Why your header feels “outside the virtual table”

Because you virtualise only the `<tbody>` for performance, the `<thead>` sits in its own table so it can stay sticky. If the two tables do **not** share identical `border-collapse`, `box-sizing`, and left-offset, even a 1 px mismatch becomes visible:

```css
/* keep both in the exact same box model */
.headerTable,
.vTable {
  box-sizing: border-box;       /* width includes borders */
  border-collapse: collapse;
  border-spacing: 0;
  table-layout: fixed;          /* column widths driven by CSS grid vars */
}

/* line-up the left edges */
.headerViewport,
.verseTableViewport { left: 0; }          /* or translateX(syncScrollX) */
````

If you still see a gap after zeroing `border-spacing`, the culprit is wrapper padding. Keep drilling up the DOM in DevTools until you find something that isn’t `0px` on the left; nuke it and the header/body will snap perfectly to the nav’s edge.

---

#### Sanity-check script (optional)

```js
// Drop this in the console:
const headRect = document.querySelector('.headerTable').getBoundingClientRect();
const bodyRect = document.querySelector('.vTable').getBoundingClientRect();
console.log('ΔX =', bodyRect.left - headRect.left);  // should be 0
```

When that prints `0`, your centering issue is gone. If you’d like me to walk through a specific snippet (CSS or the React layout code) just paste it in and we’ll tighten up the last pixel together.
