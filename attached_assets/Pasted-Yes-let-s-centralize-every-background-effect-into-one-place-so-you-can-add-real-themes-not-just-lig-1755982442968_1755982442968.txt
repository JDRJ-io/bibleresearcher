Yes—let’s centralize every background effect into one place so you can add real themes (not just light/dark). Below is a clean, drop-in structure that:

* puts **all colors + gradients** behind CSS variables,
* drives **`body::before`** from variables (so no per-theme CSS files),
* keeps Tailwind aliases in sync,
* and lets you register new themes like **Aurora, Sepia, Forest, Cyberpunk** in one file.

---

# 1) One source of truth: `themes/registry.ts`

```ts
// client/src/themes/registry.ts
export type ThemeName = 'light' | 'dark' | 'aurora' | 'sepia' | 'forest' | 'cyberpunk';

type ThemeVars = {
  // surfaces
  bgPrimary: string;
  bgSecondary: string;
  headerBg: string;
  columnBg: string;
  highlightBg: string;

  // gradient driving body::before
  gradAngle?: string;   // default "180deg"
  grad0: string;
  grad1: string;

  // glass morphism (rgba so gradient shows through)
  glassBg: string;

  // optional text / accents if you want later
  // accent?: string;
};

export const THEMES: Record<ThemeName, ThemeVars> = {
  light: {
    bgPrimary: 'hsl(0, 0%, 100%)',
    bgSecondary: 'hsl(210, 40%, 98%)',
    headerBg: 'hsl(0, 0%, 100%)',
    columnBg: 'hsl(0, 0%, 100%)',
    highlightBg: 'hsl(214, 100%, 97%)',
    grad0: 'hsl(210, 40%, 99%)',
    grad1: 'hsl(200, 30%, 97%)',
    glassBg: 'rgba(255,255,255,0.92)',
  },
  dark: {
    bgPrimary: 'hsl(222, 20%, 11%)',
    bgSecondary: 'hsl(222, 15%, 8%)',
    headerBg: 'hsl(222, 20%, 11%)',
    columnBg: 'hsl(222, 20%, 11%)',
    highlightBg: 'hsl(215, 27%, 32%)',
    grad0: 'hsl(220, 20%, 10%)',
    grad1: 'hsl(210, 25%, 8%)',
    glassBg: 'rgba(0,0,0,0.15)',
  },
  aurora: {
    bgPrimary: 'hsl(210, 30%, 12%)',
    bgSecondary: 'hsl(200, 25%, 10%)',
    headerBg: 'hsl(210, 30%, 12%)',
    columnBg: 'hsl(210, 30%, 12%)',
    highlightBg: 'hsla(170, 80%, 60%, 0.18)',
    gradAngle: '200deg',
    grad0: 'hsl(190, 90%, 18%)',
    grad1: 'hsl(280, 70%, 16%)',
    glassBg: 'rgba(10, 20, 30, 0.28)',
  },
  sepia: {
    bgPrimary: 'hsl(35, 35%, 92%)',
    bgSecondary: 'hsl(35, 30%, 88%)',
    headerBg: 'hsl(35, 35%, 92%)',
    columnBg: 'hsl(35, 35%, 92%)',
    highlightBg: 'hsla(50, 90%, 60%, 0.25)',
    grad0: 'hsl(35, 40%, 96%)',
    grad1: 'hsl(30, 30%, 90%)',
    glassBg: 'rgba(255, 247, 230, 0.85)',
  },
  forest: {
    bgPrimary: 'hsl(145, 20%, 12%)',
    bgSecondary: 'hsl(145, 18%, 10%)',
    headerBg: 'hsl(145, 20%, 12%)',
    columnBg: 'hsl(145, 20%, 12%)',
    highlightBg: 'hsla(120, 50%, 50%, 0.22)',
    grad0: 'hsl(150, 25%, 14%)',
    grad1: 'hsl(130, 20%, 10%)',
    glassBg: 'rgba(8, 24, 14, 0.24)',
  },
  cyberpunk: {
    bgPrimary: 'hsl(280, 28%, 10%)',
    bgSecondary: 'hsl(280, 24%, 8%)',
    headerBg: 'hsl(280, 28%, 10%)',
    columnBg: 'hsl(280, 28%, 10%)',
    highlightBg: 'hsla(310, 95%, 60%, 0.22)',
    gradAngle: '180deg',
    grad0: 'hsl(300, 80%, 18%)',
    grad1: 'hsl(200, 80%, 18%)',
    glassBg: 'rgba(20, 10, 30, 0.28)',
  },
};
```

---

# 2) Single CSS that consumes variables

```css
/* client/src/styles/backgrounds.css */

/* Body owns a real background color */
body {
  background: var(--background);
}

/* Global gradient via body::before driven by variables */
body::before {
  content: "";
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 0;
  background-image: linear-gradient(
    var(--bg-grad-angle, 180deg),
    var(--bg-grad-0) 0%,
    var(--bg-grad-1) 100%
  );
}

/* App content above the gradient */
#root, .app-root { position: relative; z-index: 1; }

/* Glass morphism helper */
.glass-morphism { background: var(--glass-bg); }

/* (Optional) keep your other styles… */
```

> Make sure this file is imported once (e.g., in `index.css` before Tailwind utilities).

---

# 3) ThemeManager applies everything (one function)

```ts
// client/src/utils/themeManager.ts
import { THEMES, ThemeName } from '@/themes/registry';

const LS_KEY = 'bible-theme-optimized';

export function applyTheme(name: ThemeName) {
  const t = THEMES[name];
  const root = document.documentElement;

  // remove previous theme-* class
  Array.from(root.classList)
    .filter(c => c.startsWith('theme-'))
    .forEach(c => root.classList.remove(c));
  root.classList.add(`theme-${name}`);

  const set = (k: string, v: string) => root.style.setProperty(k, v);

  // canonical vars
  set('--bg-primary', t.bgPrimary);
  set('--bg-secondary', t.bgSecondary);
  set('--header-bg', t.headerBg);
  set('--column-bg', t.columnBg);
  set('--highlight-bg', t.highlightBg);

  // gradient vars
  set('--bg-grad-angle', t.gradAngle ?? '180deg');
  set('--bg-grad-0', t.grad0);
  set('--bg-grad-1', t.grad1);

  // glass
  set('--glass-bg', t.glassBg);

  // Tailwind-facing aliases
  set('--background', t.bgPrimary);
  set('--primary', t.bgPrimary);
  set('--secondary', t.bgSecondary);
  set('--card', t.columnBg);
  set('--popover', t.headerBg);

  localStorage.setItem(LS_KEY, name);
}

export function initTheme(defaultName: ThemeName = 'light') {
  const saved = (localStorage.getItem(LS_KEY) as ThemeName) || defaultName;
  applyTheme(saved);
}
```

Call `initTheme()` once in your app bootstrap (before first paint if possible).

---

# 4) Minimal migration checklist

1. **Remove** the old `.dynamic-background` component and any `z-index:-10` hacks.
2. **Ensure** your `body` rule is **not** `background: transparent`.
3. **Import** `backgrounds.css` *after* base theme CSS but before Tailwind utilities.
4. **Replace** your current ThemeProvider call with `initTheme()` + a simple toggle that calls `applyTheme('aurora')`, etc.
5. Wherever you want the glass look, just add `.glass-morphism`.

---

# 5) Add a new theme in 30 seconds

Just add a key in `THEMES`:

```ts
neon: {
  bgPrimary: 'hsl(260, 25%, 12%)',
  bgSecondary: 'hsl(260, 22%, 10%)',
  headerBg: 'hsl(260, 25%, 12%)',
  columnBg: 'hsl(260, 25%, 12%)',
  highlightBg: 'hsla(170, 95%, 60%, 0.22)',
  gradAngle: '160deg',
  grad0: 'hsl(170, 80%, 22%)',
  grad1: 'hsl(310, 80%, 22%)',
  glassBg: 'rgba(15, 10, 20, 0.26)',
}
```

Then call `applyTheme('neon' as any)` from your UI toggle.

---

# 6) Tiny sanity test (no browsers required)

```ts
// tests/theme.vars.spec.ts (Vitest + JSDOM)
import { describe, it, expect } from 'vitest';
import { applyTheme } from '@/utils/themeManager';

const mustVars = [
  '--bg-primary','--bg-secondary','--header-bg','--column-bg','--highlight-bg',
  '--bg-grad-angle','--bg-grad-0','--bg-grad-1','--glass-bg',
  '--background','--primary','--secondary','--card','--popover'
];

const get = (v: string) => getComputedStyle(document.documentElement).getPropertyValue(v).trim();

describe('themes set required variables', () => {
  it('light + aurora fill all vars', () => {
    applyTheme('light');
    mustVars.forEach(v => expect(get(v), `missing ${v} in light`).toBeTruthy());
    applyTheme('aurora');
    mustVars.forEach(v => expect(get(v), `missing ${v} in aurora`).toBeTruthy());
    expect(get('--bg-grad-0')).not.toBe(get('--bg-grad-1'));
  });
});
```

---

## What you get

* A **single registry file** to author new themes.
* **One CSS** that renders backgrounds/gradients from vars.
* Fully compatible with Tailwind tokens (`--background`, `--card`, etc.).
* Fast runtime switching with `applyTheme(themeName)`.

If you want, I can also sketch a compact **ThemeSwitcher** UI (dropdown with preview swatches) that calls `applyTheme()` and persists to `localStorage`.
