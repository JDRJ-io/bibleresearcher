### Yes — that **redeem-code** function is the missing piece that makes the dev / promo codes work.

Below is a concise checklist so you can drop it in and deploy without guessing.

---

## 1 Create the function folder

```bash
# In your project root (same level as package.json)
supabase functions new redeem-code
```

*CLI scaffolds `supabase/functions/redeem-code/index.ts`.*

---

## 2 Replace the scaffold with the full code

Open `supabase/functions/redeem-code/index.ts`, delete its contents, and paste **exactly** this:

```ts
import { serve } from 'https://deno.land/std@0.224.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

serve(async (req) => {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  );

  const { code } = await req.json().catch(() => ({}));
  if (!code) return resp('Missing code', 400);

  /* 1. current user from JWT */
  const { data: { user } } = await supabase.auth.getUser(req);
  if (!user) return resp('Unauthorized', 401);

  /* 2. lookup code */
  const { data: access } = await supabase
    .from('access_codes')
    .select('*')
    .eq('code', code)
    .maybeSingle();

  if (!access)                     return resp('Invalid code',   400);
  if (access.expires_at && new Date(access.expires_at) < new Date())
                                   return resp('Code expired',   400);
  if (access.used_count >= access.max_uses)
                                   return resp('Code exhausted', 400);

  /* 3. upgrade profile */
  const { error: upErr } = await supabase
    .from('profiles')
    .update({ tier: access.tier })
    .eq('id', user.id);
  if (upErr) return resp(upErr.message, 400);

  /* 4. increment use counter */
  await supabase
    .from('access_codes')
    .update({ used_count: access.used_count + 1 })
    .eq('code', code);

  return resp('ok', 200);

  function resp(msg: string, status = 200) {
    return new Response(JSON.stringify({ message: msg }), {
      status,
      headers: { 'Content-Type': 'application/json' },
    });
  }
});
```

---

## 3 Add the **service-role key** to the function’s secrets

```bash
supabase secrets set SUPABASE_SERVICE_ROLE_KEY='YOUR_SERVICE_ROLE_KEY'
```

*(Find the key in **Project Settings → API → Service role**.)*

You don’t need to set `SUPABASE_URL`; the CLI injects it automatically.

---

## 4 Deploy the function

```bash
supabase functions deploy redeem-code
```

*CLI output ends with something like:*

```
Deploy completed.
Function URL: https://ecaqvxbbscwcxbjpfrdm.supabase.co/functions/v1/redeem-code
```

---

## 5 Front-end test

With your site running:

1. **Sign in** (regular magic link).
2. **POST** to the function (your DevUnlock component does this) with JSON body `{"code":"DEV-ALPHA-2025"}`.
3. Response `{ "message": "ok" }`.
4. Refresh → premium features appear.

---

### Common gotchas

| Symptom                                    | Fix                                                                                                                                           |
| ------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |
| **403 Unauthorized**                       | You didn’t include your session JWT. Make sure the fetch is called from the browser where the user is logged in.                              |
| **401 Unauthorized (function)**            | Supabase couldn’t extract the user – ensure you’re passing the cookies (fetch from same-origin) or an `Authorization: Bearer <token>` header. |
| **400 “Invalid code”**                     | Code not in `access_codes` table (run the seed insert).                                                                                       |
| **Edge function can’t import supabase-js** | CLI too old → `npm i -g supabase@latest`.                                                                                                     |

Once you see `"ok"` and `profiles.tier` flips to `premium`, the pay-wall logic you already built will let you past.

That’s all that was left—no other dashboard changes are required. If any command above errors, copy the exact message here and we’ll resolve it.
