Below is a surgical fix for the **“columns start centred but become inaccessible on the left”** bug and the design for the **dual‑column mode** you described.
Nothing here touches Supabase or the slot grid—only CSS + two lines of JS.

---

## 1 Bug: centred table won’t scroll left when too many columns are visible

### Root cause

`center-wrapper` is a flex container → its child (`.bible-table-wrapper`) is automatically shrink‑wrapped. When the table grows wider than the viewport, the left edge is still centred **outside** the screen; `overflow‑auto` on the child can only show content to the right.

### Fix (6 CSS LoC + 1 JS line)

```css
/* index.css */

.center-wrapper          { display:flex; justify-content:center; }
.center-wrapper > .bible-table-wrapper {
  min-width: fit-content;          /* keep centring when ≤3 columns */
  flex-shrink: 0;                  /* NEW – do not shrink inside flex */
}
.center-wrapper.tooWide {          /* NEW class toggled by JS */
  justify-content:flex-start;      /* left‑align when >3 columns */
}
```

```tsx
// VirtualBibleTable.tsx  (after visibleColumns calculated)
useEffect(() => {
  const wrapper = centerRef.current;        // outer div with class "center-wrapper"
  if (!wrapper) return;
  const tooWide = wrapper.scrollWidth > wrapper.clientWidth;
  wrapper.classList.toggle("tooWide", tooWide);
}, [visibleColumns, sizeMultiplier]);
```

*Result* – when 1‑3 columns are visible the table stays centred; the moment a
fourth appears, wrapper switches to `tooWide` (left‑aligned), exposing the full
horizontal scrollbar so you can pan to the leftmost column.

---

## 2 Dual‑column mobile view (reference pinned)

### Behaviour

* Toggle in Hamburger Menu: **“Dual‑column mode”**

  * **OFF** (default) – current horizontal scroll behaviour.
  * **ON** – viewport shows `Ref` (pinned) + whatever **one** other column is
    currently selected. Swipe horizontally to flip between non‑ref columns.

### Implementation sketch

1. **Store flag**

   ```ts
   const useUIStore = create(set => ({
     dualMode : false,
     setDual  : (v:boolean) => set({ dualMode:v })
   }));
   ```

2. **Wrapper width**

   ```tsx
   const colW = parseFloat(getComputedStyle(document.documentElement)
                           .getPropertyValue("--baseColW")) * sizeMult;
   const dualWidth = dualMode ? colW * 2 : "auto";
   <div style={{ width: dualWidth }} className="bible-table-wrapper …">
   ```

3. **Pin reference column**

   ```css
   .cell-ref {
     position: sticky;
     left: 0;
     z-index: 10;       /* above other cells */
     background: inherit;
   }
   ```

4. **Swipe logic**

   Keep the same `touch-action` heuristic, but when `dualMode` is true, set
   `maxScrollLeft = (visibleNonRefCount - 1) * colW`. Horizontal pan snaps to
   increments of `colW` (`scrollTo({left: idx*colW, behavior:'smooth'})`).

No extra slot logic is needed: the reference column is slot 0 and remains
visible; the second column is whichever visible slot currently starts at
`scrollLeft`.

---

## 3 Where to document the change

* `UI_LAYOUT_SPEC.md`
  *Add under **Mobile Modes**:*

  > “Dual‑column mode: Ref column is sticky left; wrapper width = 2 × column
  > width; horizontal swipe flips the non‑ref column in view.”

* `BEHAVIOR_CONTRACTS.md`
  *Add contract D‑1:*

  | Contract                                                                                                            | Verification                    |
  | ------------------------------------------------------------------------------------------------------------------- | ------------------------------- |
  | **D‑1** In dual‑column mode, Ref column is always visible and horizontal scroll snaps exactly one column at a time. | `cypress/e2e/dual‑column.cy.js` |

No other docs need editing.

---

### How to proceed

1. Add the 6‑line CSS and the `useEffect` toggle – bug fixed.
2. Implement steps 1‑4 for dual‑column mode (≈ 40 LoC total).
3. Update the two docs as shown, run tests, push.

The UI will now:

* remain centred for minimalist setups,
* left‑align and scroll when more columns appear,
* offer a mobile‑friendly dual‑column option with the reference column always in sight.

Let me know if you need the exact diff or a Cypress snippet for the snap‑scroll test.
