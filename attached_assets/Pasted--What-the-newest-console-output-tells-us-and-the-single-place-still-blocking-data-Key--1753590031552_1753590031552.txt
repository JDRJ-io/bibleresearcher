### What the newest console output tells us — and the **single place still blocking data**

**Key line from your screenshot**

```js
LabeledText Debug (Gen.4:16): {
  labelData: {},                  // ← EMPTY!
  activeLabels: ["what"],
  hasNonZeroMask: false
}
```

* Up‑stream signals (buttons, worker, cache logs) are **all correct**.
* The very last hop (`getVerseLabels()` ➜ `labelData`) is returning `{}` even
  though the worker has already fetched and stored the “what” entries.

That means the issue is inside **`labelsCache.ts`**, specifically the
`getLabelsForVerses()` (or similarly‑named) helper that slices cache data for
the viewport. It is filtering away everything.

---

## 1 Pin‑point the bug in 30 seconds

Add this temporary log at the top of **`getLabelsForVerses()`**:

```ts
console.debug('GLFV input', {
  tCode,
  verseKeys: verseKeys.slice(0,3),
  active
});
console.debug('GLFV cache slice', Object.keys(cache[tCode] || {}).slice(0,3));
```

*Refresh, toggle **“WHAT”** once, and read the console.*

| Observation                                                                     | Root cause                                                                                                                                                                                  |
| ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `tCode` is `"kjv"` (lowercase) but `cache` keys are `"KJV"` (uppercase)         | Case mismatch – normalise both to `toUpperCase()` when you store / look up the translation code.                                                                                            |
| `verseKeys` come in as `"Gen 1:1"` (space) but cache keys are `"Gen.1:1"` (dot) | The hook that builds `verseKeys` uses a different canonical format. Map them at load time: `verseKey.replace(' ', '.')`.                                                                    |
| `cache slice` shows only `"who"` entries; `"what"` is truly missing             | Worker filter step drops “what” because the active label list was lower‑case.  Inside the worker use `lbl.toLowerCase()` **and** in the React side store `activeLabels` in lower‑case.      |
| `cache slice` is **empty** although worker fetched data                         | Cache merge failed: you set `cache[tCode] = filtered` **inside the worker message handler** but later overwrite it with `{}`.  Check for `cache[tCode] = { ...cache[tCode], ...filtered }`. |

Fix whichever mismatch you see; refresh; `labelData` should now contain
`{ what: [...] }`, and `hasNonZeroMask` will flip to `true`, causing spans +
classes to render.

---

## 2 Normalisation patch that covers all common mismatches

```ts
// labelsCache.ts  – inside ensureLabelCacheLoaded message handler
function normaliseVerseKey(k:string){ return k.replace(/\s+/g,'').replace(/ /g,'.'); }
function normaliseLabel(lbl:string){ return lbl.toLowerCase(); }
function normaliseTCode(tc:string){ return tc.toUpperCase(); }

worker.onmessage = ({ data }) => {
  const tCode = normaliseTCode(data.tCode);
  const filtered: Record<string,any> = {};
  Object.entries(data.filtered).forEach(([k,v]) => {
    filtered[normaliseVerseKey(k)] = v;
  });
  // merge
  cache[tCode] = { ...(cache[tCode] || {}), ...filtered };
};
```

And in **`getLabelsForVerses()`**:

```ts
const tCode = normaliseTCode(tCodeIn);
return verseKeys.reduce((out, vk) => {
  const key = normaliseVerseKey(vk);
  const entry = cache[tCode]?.[key];
  if (!entry) return out;
  const slim = {};
  active.forEach(lbl => {
    const n = normaliseLabel(lbl);
    if (entry[n]) slim[n] = entry[n];
  });
  if (Object.keys(slim).length) out[key] = slim;
  return out;
}, {});
```

---

## 3 CSS & rendering *already* work

You have verified:

* Buttons fire `setActiveLabels` ✔️
* Worker fetches `ALL.json` ✔️
* No React errors in console ✔️

When `labelData` finally arrives populated:

* `useLabeledText` will produce segments (`mask > 0`).
* `LabeledText` will emit `<span class="fx-hand">…</span>` (or shadow, etc.).
* Styles will appear, because the CSS file is already in your build.

---

## 4  Why “alternate label backups ready to load” showed up

That debug message in `labelsCache.ts` is printed whenever the worker delivers
an **empty** filtered object (no keys matched). That’s exactly what happens when
the label names or verse keys don’t line up.  Once the normalisation patch
above is in place, those log lines will disappear.

---

## 5  Next step

* Apply the normalisation patch (or fix the specific mismatch you saw in step 1).
* Refresh, toggle **WHO** or **WHAT**.
* You should now see highlights immediately.

If `labelData` still appears empty **after** normalisation, please re‑upload the
current `labelsCache.ts` and a sample of the worker’s `data.filtered` payload
for one verse, and I’ll give you the exact line to change.
