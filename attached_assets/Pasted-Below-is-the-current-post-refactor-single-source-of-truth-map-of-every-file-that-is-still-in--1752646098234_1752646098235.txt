Below is the **current, post‑refactor “single‑source‑of‑truth” map** of every file that is still in the workspace and actively referenced after PR‑A → D.
It replaces the earlier draft and removes any references to files or server code that no longer exist.

---

# 📂 File Connections & Functions Map

*(Anointed.io front‑end PWA – July 2025)*

> **Legend**
> • **→** = depends on / imports
> • **⬅** = consumed by
> • **⚙︎** = core function(s)

---

## 1  Runtime Data Facade  ### `client/src/data/BibleDataAPI.ts`  ⚙︎

| Method                            | Purpose                                               | Reads from Supabase bucket **anointed/**                          |
| --------------------------------- | ----------------------------------------------------- | ----------------------------------------------------------------- |
| `getTranslation(id)`              | returns parsed `Map<index,text>`                      | `translations/${id}.txt`                                          |
| `getCrossRefSlice(set,start,end)` | byte‑range slice of cf1/cf2 text                      | `references/${set}.txt`                                           |
| `getCfOffsets(set)`               | lazy‑loads & caches offsets JSON                      | `references/${set}_offsets.json`                                  |
| `getProphecy(key)`                | returns TSV row (Prediction/Fulfillment/Verification) | `references/prophecy_rows.txt` + `prophecy_index.json`            |
| `getStrongsOffsets()`             | verse & index byte ranges                             | `references/strongsVerseOffsets.json`, `strongsIndexOffsets.json` |

*Holds the **master in‑memory cache** (`Map<string, Map<number,string>>`); LRU‑evicts when size > 12.*

---

## 2  Supabase Client   ### `client/src/lib/supabaseClient.ts`

*Singleton instantiated with anon key; used only by **BibleDataAPI** and **queueSync.ts**.*

---

## 3  State & Stores

| File                        | Type    | ⚙︎ Key exports                                                                   | Used by                            |
| --------------------------- | ------- | -------------------------------------------------------------------------------- | ---------------------------------- |
| `store/translationSlice.ts` | Zustand | `main`, `alternates`, `columnOrder`, `anchorIndex`, `setMain`, `toggleAlternate` | TranslationSelector, ColumnHeaders |
| `hooks/useBibleData.ts`     | Zustand | slice‑based verse selector; no text blobs                                        | VirtualRow, VerseRow               |
| `hooks/useOnlineStatus.ts`  | hook    | online/offline boolean                                                           | QueueSync banner                   |
| `hooks/useQueueSync.ts`     | hook    | pushes Dexie mutations to Supabase                                               | queueSync.ts                       |

---

## 4  Workers  (registered in `workers.ts`)

| Worker                     | Purpose                                     | Data in                         | Data out          |
| -------------------------- | ------------------------------------------- | ------------------------------- | ----------------- |
| `translationWorker.js`     | parse large `translations/*.txt` off‑thread | ArrayBuffer of file             | `Map<index,text>` |
| `searchWorker.js`          | fuzzy verse search                          | query term                      | verse hits        |
| `crossReferencesWorker.ts` | maps verse → list of cross refs             | `{key,text}` message with slice | array of refs     |

> **No worker performs network fetches**; all file bytes are posted from the main thread via BibleDataAPI.

---

## 5  Hooks (runtime data access)

| Hook                             | Purpose                                                                                                 | Internals |
| -------------------------------- | ------------------------------------------------------------------------------------------------------- | --------- |
| `useEnsureTranslationLoaded(id)` | triggers `BibleDataAPI.getTranslation` in effect; stores result in master cache.                        |           |
| `useSliceDataLoader(slice)`      | loads cf offsets + prophecy rows for verses in slice; posts data to workers; triggers main cache loads. |           |
| `useTranslationMaps()`           | memoised combo of translation slice & master cache; exposes `getVerseText(verseKey,id)`.                |           |
| `useColumnKeys()`                | returns `[Cross,P,F,V, main, ...alternates]` in user order.                                             |           |

---

## 6  UI Component Tree (runtime)

```
App.tsx
 ├─ ThemeProvider
 ├─ AuthContext
 └─ BiblePage (pages/bible.tsx)
     ├─ TopHeader
     ├─ HamburgerMenu
     │    └─ TranslationSelector
     └─ VirtualBibleTable
          ├─ ColumnHeaders
          ├─ VirtualRow  (react‑window rowRenderer)
          │    ├─ VerseRow (main + alternates)
          │    └─ ProphecyColumns (P | F | V)
          └─ ExpandedVerseOverlay  (portal)
```

---

## 7  Offline / PWA

| File                           | Role                                                                                 | Notes                      |
| ------------------------------ | ------------------------------------------------------------------------------------ | -------------------------- |
| `offline/offlineDB.ts` (Dexie) | tables: `bookmarks`, `highlights`, `queued_mutations`                                | No verse text stored here. |
| `offline/queueSync.ts`         | replays queued\_mutations via Supabase RPC; conflict resolution.                     | called by `useQueueSync`.  |
| `sw.ts`                        | Workbox SW; runtime caching of translation slices (actually fetched via signed URL). |                            |
| `vite.config.pwa.ts`           | Generates manifest + precache manifest (only shell assets, no Bible files).          |                            |

---

## 8  Tests & CI Guards

| File                                      | Purpose                                          |
| ----------------------------------------- | ------------------------------------------------ |
| `cypress/e2e/translation-switching.cy.js` | main/alternate swap & column disappearance test  |
| `cypress/e2e/scroll.spec.ts`              | virtual scroll perf across 3 translations        |
| `cypress/e2e/prophesy.cy.js`              | verifies prophecy columns populate               |
| `scripts/bundle-check.js`                 | fails build if gzip > 2 MB                       |
| `validate-architecture.sh`                | grep fails on `/api/references` or raw DOM usage |
| `.eslintrc.js` custom rule                | forbids `fetch(` outside BibleDataAPI            |

---

## 9  Utility / Config

| File                              | Purpose                                                                         |
| --------------------------------- | ------------------------------------------------------------------------------- |
| `tailwind.config.ts`              | JIT with purged content paths; custom Bible color palette.                      |
| `vite.config.ts`                  | single entry; uses **bundleSplit.ts** (or **chunkConfig.ts**) for manualChunks. |
| `postcss.config.js`               | autoprefixer + tailwindcss.                                                     |
| `drizzle.config.ts` + `schema.ts` | local dev migration scripts only.                                               |

---

## 10  Data Flow Diagram (runtime)

```
Supabase Storage
   │   (signed URL via supabaseClient)
   ▼
BibleDataAPI (single facade + master LRU cache)
   │                     │
   │ postMessage bytes   ├─ getProphecy()  ──► ProphecyColumns
   ▼                     └─ getCrossRefSlice()
translationWorker   crossReferencesWorker
   │                          │
   ▼                          ▼
master cache      ▼ refs list posted back
   │                          │
   └─────► useTranslationMaps / getVerseText
                         │
                         ▼
                   VirtualRow / VerseRow
```

---

### Missing / optional files

put here all files in the database that are not loaded
