

## 1  Order of compilation: Tailwind utilities come **after** your theme rules

```css
@import './styles/themes‑optimized.css';
@import './styles/label-effects.css';

@tailwind base;
@tailwind components;
@tailwind utilities;   /* <-- these classes win the cascade */
```

Anything that Tailwind places in `utilities` (e.g. `bg-white`, `bg-background`, `min-h-screen`) will override the earlier declarations **unless your later rules have higher specificity or `!important`**.

**Fix (pick one):**

*Move* the three animated‑theme blocks **below** `@tailwind utilities`, or
wrap them in `@layer utilities { … }` so they are emitted after Tailwind’s own utilities.

---

## 2  Mismatched class names

| Theme you toggle in JS | CSS block that contains the animation   |
| ---------------------- | --------------------------------------- |
| `cyber`                | `.cyber-mode { … }` (Digital Monastery) |
| `cyberpunk`            | `.cyberpunk-mode { … }` (Neon CRT)      |
| `forest`               | `.forest-mode { … }`                    |
| `meadow`               | `.meadow-mode { … }`                    |

If the selector in the DOM is `body class="cyber-mode"` but the animated overlays are defined under `.cyberpunk-mode::before`, the gradient never appears. Make sure the option value, the JS that appends `‑mode`, **and** the CSS block are identical.

---

## 3  Body needs a positioning context for negative *z‑index* pseudo‑elements

Most of your overlays use:

```css
body.rainbow-mode::before { position:fixed; z-index:-1; }
```

…but `html` has no background set to *transparent* and `body` has no stacking context, so that pseudo‑element can wind up **behind the `html` element itself**.

```css
html { background: transparent; }          /* give it nothing to hide the gradient */
body { position: relative; }               /* create a new stacking context      */
```

Add those two lines once, outside of any theme blocks.

---

## 4  `background-color` vs `background`

Inside `@layer base` you do:

```css
body { background-color: var(--bg-color); }
```

Later you set:

```css
body.rainbow-mode { --bg-color: linear-gradient(…); }
```

That value is **not a valid color**, so the browser discards it and silently falls back to the previous colour. The gradient you *do* want is set correctly with

```css
body.rainbow-mode { background: var(--bg-color); }
```

but if the `@layer base` rule comes *after* it, the invalid `background-color` still wins the cascade and you see… nothing.

> **Keep the shorthand** (`background`) **as the last declaration for every animated theme** or rename the custom property, e.g. `--bg-gradient`, so it is never read by a `background‑color` property.

---

## 5  Utility classes that still slip through

Even after the “make white things transparent” section you may miss some Tailwind classes:

* `bg-neutral-50` / `bg-neutral-100`
* `bg-slate-*`
* `bg-zinc-*`
* dark‑mode variants like `dark:bg-black`

Add them once:

```css
body.rainbow-mode [class*="bg-"],
body.aurora-mode  [class*="bg-"],
…                 { background: transparent !important; }
```

or author them with higher specificity: `.rainbow-mode .bg-white`.

---

## 6  Quick checklist to verify in DevTools

1. **Toggle a theme** ➜ in Elements view confirm the class appears on `<body>`.
2. In the **Styles** pane select the `::before` pseudo‑element and look at:

   * computed **size** (should cover the viewport),
   * computed **background‑image** (should be the gradient),
   * computed **z‑index** (negative but the `body` stack context exists).
3. In **Computed → background** ensure the final winner comes from the animated rule, not from a Tailwind utility.

---

### Minimal patch that usually makes the gradients show up

```css
/* 1 – late in your main.css, after Tailwind utilities */

html { background: transparent; }
body { position: relative; }

/* 2 – name alignment (example for Cyberpunk) */
body.cyber-mode,
body.cyberpunk-mode {   /* keep both if you want */
  /* shared variables … */
}
```

If you apply the ordering fix and make sure the names match, you should immediately see the Rainbow gradient flow when you reload the page.
