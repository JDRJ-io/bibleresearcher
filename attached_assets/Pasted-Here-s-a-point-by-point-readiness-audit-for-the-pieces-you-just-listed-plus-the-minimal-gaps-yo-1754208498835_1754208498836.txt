Here’s a **point-by-point readiness audit** for the pieces you just listed, plus the minimal gaps you still need to close.  Everything is mapped to concrete Supabase features or tables so you can tick items off.

---

## 1 Core Auth Flow (email → magic-link)

| Step                                                              | Status                         | What to verify / add                                                                                |
| ----------------------------------------------------------------- | ------------------------------ | --------------------------------------------------------------------------------------------------- |
| **1.1  Supabase project has “Email magic link” provider enabled** | ✅ (enabled by default)         | Check **Auth → Providers → Email**; toggle *magic link* on.                                         |
| **1.2  `supabase-js` client initialized in your Next JS app**     | ✅ you use it for RLS fetch     | Make sure the client is imported from a single `supabaseClient.ts`.                                 |
| **1.3  `Auth` route `/auth/callback` (or `/auth`) present**       | **⚠ TODO**                     | In App Router: a `RouteSegment` that calls `supabase.auth.exchangeCodeForSession()` after redirect. |
| **1.4  Reusable “Sign In” component**                             | ✅ (`<AuthDialog>` you built)   | Should call `supabase.auth.signInWithOtp({ email })`.                                               |
| **1.5  Session stored in `AuthContext` / Zustand**                | ✅ already powering RLS queries | Confirm `supabase.auth.onAuthStateChange` listener cleans up on unmount.                            |

---

## 2 Post-confirmation “Complete profile” screen

| Requirement                                                                                                         | Status                       | What to verify / add                                                                                      |
| ------------------------------------------------------------------------------------------------------------------- | ---------------------------- | --------------------------------------------------------------------------------------------------------- |
| **2.1  `profiles` table** (`id uuid PK references auth.users`, `name varchar(60)`, `bio varchar(120)`, `tier text`) | ✅ table exists (notes 21–22) | Ensure **RLS**: `auth.uid() = id` for SELECT/UPDATE.                                                      |
| **2.2  Row auto-insertion trigger after user signs up**                                                             | **⚠ TODO**                   | Add Postgres function `insert_profiles_row()` on `auth.user_created` → inserts default row.               |
| **2.3  “Complete profile” page** shown when `name` is NULL                                                          | **⚠ TODO**                   | After login, if `profile.name == null`, route to `/welcome`. Form: **name (required, ≤ 40), bio (≤ 50)**. |
| **2.4  Validation / update logic**                                                                                  | **⚠ TODO**                   | `supabase.from('profiles').update({ name, bio }).eq('id', user.id)`                                       |

---

## 3 Subscription / donation tier

| Piece                                                           | Status     | What to verify / add                                                                 |
| --------------------------------------------------------------- | ---------- | ------------------------------------------------------------------------------------ |
| **3.1  Payment processor (Stripe, Paddle, LemonSqueezy, etc.)** | **⚠ TODO** | Pick one. Supabase has a Stripe subscription starter kit.                            |
| **3.2  Webhook → `profile.tier = 'premium'`**                   | **⚠ TODO** | Create Edge Function or Serverless route that Stripe calls on “invoice.paid”.        |
| **3.3  Front-end paywall check** (`tier === 'premium'`)         | **⚠ TODO** | Wrap premium translation loader and forum routes in `if (profile.tier==='premium')`. |
| **3.4  Graceful fallback message + CTA**                        | **⚠ TODO** | e.g., “Unlock AMP/NASB & forum voting for \$5/mo.”                                   |

---

## 4 Premium translation access

| Check                                                           | Status                                                                              |
| --------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| Loader already reads from bucket path `translations/premium/*`. | ✅                                                                                   |
| Row-level filter: `if (!isPremium) reject`.                     | **⚠ TODO** – easiest in client code; or enforce with separate bucket & signed URLs. |

---

## 5 Forum w/ suggestion & voting

| Item                                  | Status                              | Quick notes                                                                                |
| ------------------------------------- | ----------------------------------- | ------------------------------------------------------------------------------------------ |
| `forums.posts`, `forums.votes` tables | **⚠ TODO** (schema not yet created) | `posts(id uuid PK, user_id, title, body, created_at)`; `votes(user_id, post_id, value)`    |
| RLS: only premium users allowed       | **⚠ TODO**                          | policy: `EXISTS (SELECT 1 FROM profiles p WHERE p.id = auth.uid() AND p.tier = 'premium')` |
| React components                      | **⚠ TODO**                          | list, new-post dialog, up-vote button.                                                     |

---

## 6 Signed-in feature switches

| Feature                          | Gate Condition               | Present?                            |
| -------------------------------- | ---------------------------- | ----------------------------------- |
| **Notes**                        | `!!session`                  | ✅ (notes table already RLS-guarded) |
| **Bookmarks**                    | `!!session`                  | ✅                                   |
| **Highlights**                   | `!!session`                  | ✅                                   |
| **Auto-save row/col layout**     | `!!session`                  | ✅ (`user_settings` table)           |
| **Forum & premium translations** | `profile.tier === 'premium'` | **⚠ TODO conditional UI**           |

---

## 7 UI Plumbing checklist

* **Top-right “Sign In / Account” button**

  * Shows **Sign Up** dialog if `!session`.
  * Shows **Account menu** (name, tier, “Manage subscription”, “Sign out”) if logged in.
* **Route Guards**

  * `<PremiumRoute>` wrapper redirects free users to `/subscribe`.
  * `<AuthRoute>` wrapper redirects anonymous users to `/login?next=…`.
* **Email feedback**

  * After `signInWithOtp`, show “Check your inbox for a magic link” toast.
  * Handle “Invalid or expired token” gracefully on the callback route.

---

## 8 Edge-cases & tests

| Scenario                                      | Expected                                                     |
| --------------------------------------------- | ------------------------------------------------------------ |
| User clicks magic link on a **second device** | New session replaces old one (Supabase default).             |
| Premium user cancels subscription             | Webhook downgrades `tier` → next request loses premium rows. |
| Anonymous user tries to POST note             | 401 thrown by RLS → toast: “Please sign in to save notes.”   |

---

### Bottom line

| Zone                                | Ready    | Work remaining                                      |
| ----------------------------------- | -------- | --------------------------------------------------- |
| **Email magic-link login**          | **90 %** | Add callback route and profile-insert trigger.      |
| **Profile completion (name / bio)** | **0 %**  | Build `/welcome` page + update call.                |
| **Subscription gating**             | **10 %** | Pick processor, add webhook + `tier` column checks. |
| **Forum + voting**                  | **0 %**  | Schema + UI.                                        |
| **Feature toggles**                 | **70 %** | Just gate premium assets & forum with `tier`.       |

No show-stoppers—just the usual SaaS glue.  Once you green-light a payment provider I can draft the schema, Edge Function webhook, and the `/welcome` page component.  Tell me your preference (Stripe vs Paddle vs other) and we’ll knock out the remaining 30 %.
