Below is everything you need to finish the two remaining items:
**(A) guaranteed horizontal scrollbar when columns overflow** and
**(B) actually rendering the verse‑text snippets inside each cross‑reference cell.**
Nothing here touches Supabase permissions or slot logic; it’s all front‑end.

---

## A Horizontal scrollbar always visible when needed

You already added `min-width:fit-content; margin-inline:auto; overflow:auto;` to `.bible‑table‑wrapper`.
Only two tweaks remain:

| Location                                                     | What to add                                                                                                                                                                                                                                                                                                                                                                     | Why                                                                                                                                         |
| ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- |
| **index.css** (global)                                       | `css<br>.bible-table-wrapper::-webkit-scrollbar{height:8px;}<br>.bible-table-wrapper::-webkit-scrollbar-thumb{background:#bbb;border-radius:4px;}<br>`                                                                                                                                                                                                                          | Forces WebKit/Blink to render the bar even before the user scrolls and makes it tappable on iOS.                                            |
| **VirtualBibleTable.tsx** after you compute `visibleColumns` | `tsx<br>useEffect(()=>{<br>  // If table wider than viewport → ensure wrapper scrollLeft ≥ 0<br>  if(wrapperRef.current && wrapperRef.current.scrollWidth>wrapperRef.current.clientWidth){<br>    wrapperRef.current.scrollLeft = Math.min(wrapperRef.current.scrollLeft, wrapperRef.current.scrollWidth - wrapperRef.current.clientWidth);<br>  }<br>},[visibleColumns]);<br>` | Prevents the rare case where the user hid a column while scrolled far right, then shows many columns and the left edge becomes unreachable. |

*Result* – Any time the table’s width exceeds the viewport, the horizontal bar is present and usable.

---

## B Populate verse text inside the cross‑reference cells

### 1 Ensure cf‑slice loader returns all needed refs for the current slice

`useSliceDataLoader(slice)` (or the hook you renamed) should already do:

```ts
await Promise.all([
  ensureTranslationLoaded(mainId),         // text cache
  ensureCrossRefsLoaded(sliceStart, sliceEnd)  // cf cache
]);
```

### 2 Cross‑reference worker response shape

```ts
// worker sends back:
postMessage({ key: "Gen.1:1", refs: ["Heb.11:3","Isa.45:18", …] });
```

In the main thread cache you want:

```ts
crossStore = {
  "Gen.1:1": ["Heb.11:3","Isa.45:18", …],
  …
};
```

### 3 VirtualRow ⊳ CrossReferencesCell

```tsx
function CrossReferencesCell({ verseRef, onVerseClick }: { verseRef:string, onVerseClick:(r:string)=>void }){
  const crossRefs      = useBibleStore(s=>s.crossRefs[verseRef] ?? []);
  const getVerseText   = useTranslationMaps().getVerseText;
  const mainId         = useTranslationMaps().main;   // current main translation

  return (
    <div className="cell-cross flex flex-col gap-1 overflow-y-auto custom-scrollbar">
      {crossRefs.map(ref=>{
        const txt = getVerseText(ref, mainId) ?? "(loading…)";
        return (
          <button key={ref}
                  className="flex text-xs gap-1 hover:bg-gray-50 dark:hover:bg-gray-700 px-1 py-0.5 rounded"
                  onClick={e=>{e.stopPropagation(); onVerseClick(ref);}}>
            <span className="font-mono w-14 text-blue-600 dark:text-blue-400 truncate">{ref}</span>
            <span className="flex-1 text-gray-600 dark:text-gray-400 truncate">{txt}</span>
          </button>
        );
      })}
    </div>
  );
}
```

* `e.stopPropagation()` prevents the row‑level click handler from stealing the tap, which was the earlier “can’t click link” bug.
* `truncate` keeps each cross reference to one line; if you prefer a multi‑line preview just replace with `line-clamp-2`.

### 4 Pre‑loading main translation for those refs (so they don’t all show “loading”)

Inside `ensureCrossRefsLoaded` **after** fetching the list of refs:

```ts
// eager‑load main translation text for every new ref
const need = refs.filter(r => !translationCache.has(mainId, r));
if(need.length){
  await loadTranslationSlice(mainId, need);   // your existing helper
}
```

---

### Quick test matrix

| Device             | Columns toggled on                   | Expected                                                                                    |
| ------------------ | ------------------------------------ | ------------------------------------------------------------------------------------------- |
| iPhone 13 portrait | Ref + Main + Cross (default)         | Ref sticky left, Cross cell shows refs + snippets, horizontal bar hidden (table ≤ viewport) |
| iPhone 13 portrait | User toggles 2 more translations     | Table widens → left‑aligned, horizontal bar appears, can scroll to new cols                 |
| Desktop 1440 px    | 6 columns                            | Table left‑aligned, bar visible, can scroll to both extremes                                |
| Desktop 1440 px    | User hides 3 cols → table < viewport | Bar disappears, table re‑centres                                                            |

---

### What to tell the AI agent

> 1. **Do NOT create new files**.
> 2. Insert the scrollbar CSS and the scrollLeft guard into existing files.
> 3. Update `CrossReferencesCell` exactly as the snippet.
> 4. Add eager‑load of main translation text after cross‑ref slice fetch.
> 5. Verify on portrait and desktop per the table above.

After those four small edits the UI will:

* Always expose a horizontal bar when needed,
* Show verse snippets immediately inside the Cross column,
* Allow clicking a cross‑reference to jump the anchor.

Let me know once these land or if any piece needs more detail.
