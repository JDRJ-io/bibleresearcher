Below is a **mini-spec & cut-paste kit** that slots straight into the stack you already have:

---

## 2  Profile ► *Set / change* recovery passkey

```ts
import bcrypt from 'bcryptjs';
const supabase = createClient(url, anon_key);

async function savePasskey(plain: string) {
  const hash = await bcrypt.hash(plain, 12);          // 60-char bcrypt
  const { error } = await supabase.from('profiles')
    .update({ recovery_passkey_hash: hash })
    .eq('id', (await supabase.auth.getUser()).data.user?.id);
  if (error) throw error;
}
```

UI idea: “Add backup passkey” field inside **Settings → Security**.
Show ✅ toast when saved. Let users overwrite or delete it anytime.

---

## 3  Login page ► *Recover with passkey* (optional)

1. Ask for **email + passkey**.
2. Serverless function (runs with `service_role` key):

   ```ts
   const { data: prof } = await supabaseAdmin
        .from('profiles').select('recovery_passkey_hash')
        .eq('email', body.email).single();
   const ok = await bcrypt.compare(body.passkey, prof.recovery_passkey_hash);
   if (!ok) return 403;
   // generate a fresh magic-link
   const { data } = await supabaseAdmin.auth.admin.generateLink(
         { type: 'magiclink', email: body.email });
   ```
3. Email the link → user clicks → session restored → they should update their email.

*(Keeps everything password-less yet gives a back door if mail is lost.)*

---

## 4  Sign-up form ► Marketing opt-in

```tsx
const [wantsNews, setWantsNews] = useState(false);

await supabase.auth.signInWithOtp({
  email,
  options: { redirectTo: `${origin}${pathname}?fromEmail=yes` }
});

supabase.auth.onAuthStateChange(async (_e, session) => {
  if (!session) return;
  if (wantsNews) {
    await supabase.from('profiles')
      .update({ marketing_opt_in: true })
      .eq('id', session.user.id);
  }
});
```

*Checkbox label:* “Send me product updates & promos (1-2 × month)”

---

## 5  Optional: branded, in-place magic-link flow

1. **Use same-page redirect** (see code above) so the email link refreshes the *current* tab.

2. On page load run:

   ```ts
   const { data, error } = await supabase.auth.getSessionFromUrl();
   if (data?.session) toast.success('✅ Email confirmed — you are now logged in!');
   ```

3. Hide the login modal instead of navigating to a blank callback page.

---



---

