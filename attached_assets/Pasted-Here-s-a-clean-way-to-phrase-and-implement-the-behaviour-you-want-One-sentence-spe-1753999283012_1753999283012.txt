Here’s a clean way to phrase —and implement—the behaviour you want:

---

### **One-sentence spec you can hand to any dev or AI agent**

> **“In landscape orientation, center the entire column set as long as the total column width is ≤ the viewport width; once the columns exceed the viewport, leave them left-aligned inside a horizontally scrollable container.”**

---

### **Why this works**

1. **Shrink-wrap layout** – By giving the inner column row a `width: max-content`, it only grows as wide as its children (your columns).
2. **Auto-centering** – `margin: 0 auto` on that same element keeps it perfectly centered **while** it still fits.
3. **Graceful overflow** – As soon as the inner width becomes larger than the viewport, the centering margin no longer constrains it; the wrapper’s `overflow-x: auto` introduces the horizontal scrollbar so the user can pan.

---

### **Drop-in CSS (landscape only)**

```css
/* Wrapper that sits around your virtual table / column row */
.columns-wrapper {
  overflow-x: auto;            /* enables scrollbar when needed */
  -webkit-overflow-scrolling: touch; /* smooth on iOS */
}

/* Actual flex row that holds each column */
.columns {
  display: flex;
  width: max-content;          /* shrink-wrap to columns */
  margin: 0 auto;              /* center while it still fits */
}

/* Apply only in landscape – portrait rules stay as they are */
@media (orientation: landscape) {
  .columns-wrapper { overflow-x: auto; }
  .columns         { width: max-content; margin: 0 auto; }
}
```

> **React / Tailwind quick-ref:**
>
> ```jsx
> <div className="overflow-x-auto">
>   <div className="flex w-max mx-auto">
>     {/* …your column components… */}
>   </div>
> </div>
> ```

---

### **What happens in practice**

| Scenario                 | Total column width vs. viewport | Visual result                                    |
| ------------------------ | ------------------------------- | ------------------------------------------------ |
| Fewer columns (fits)     | `innerWidth ≤ viewportWidth`    | Row stays centered, no scrollbar                 |
| Many columns (overflows) | `innerWidth > viewportWidth`    | Row hugs left edge, horizontal scrollbar appears |

No JavaScript calculations are required—the browser handles it via plain CSS, so performance stays snappy.

That’s all you need! Mobile styles remain untouched; landscape now behaves exactly as described.
