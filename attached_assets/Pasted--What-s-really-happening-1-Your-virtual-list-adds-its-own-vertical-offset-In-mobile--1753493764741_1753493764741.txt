### What’s really happening

1. **Your virtual list adds its own vertical offset.**
   In mobile view the `<div style="transform: translateY(48px)" …>` that React‑Virtual (or react‑window) injects pushes the entire first **row group** (including the *column‑header bar* you highlighted) **down by the value you pass in as *paddingTop / overscan translate*.** That value equals **your top‑header height (48 px)**.

2. **Your CSS adds the *same* 48 px again.**
   `.column‑headers-container { top: var(--top‑header‑height‑mobile); }` is also `48 px`. The browser therefore positions the sticky header **48 px below the list container *plus* another 48 px inside it → net distance ≈ 96 px (double).**

```
<top‑header>  ← fixed 48 px
┆
┆ translateY(48)  ← virtual list padding
┆ ┌── column‑headers  top:48  ← sticky header
┆ ├── row 0
┆ ├── row 1
```

3. Because the top header (nav bar) is outside the virtual list, you only need **one** of those 48‑px offsets, not both.

---

## 2 ways to solve it (pick one)

| Option                                                               | What you change                                                                               | Result |
| -------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | ------ |
| **A. Let CSS handle the offset (simpler)**                           | *Remove* the 48‑px padding / translate that the virtual list adds on mobile.<br><br>\`\`\`tsx |        |
| // VirtualTable.tsx (or wherever you create the list)                |                                                                                               |        |
| const topHeaderPadding = adaptiveIsMobile ? 0 : TOP\_HEADER\_HEIGHT; |                                                                                               |        |
| \<List                                                               |                                                                                               |        |
| style={{                // 👈 mobile now 0                           |                                                                                               |        |

```
paddingTop: topHeaderPadding
```

}}
/>
`` | • Column‑header bar keeps `top: var(--top-header-height-mobile)` (48 px).<br>• Virtual rows start immediately after it, perfectly aligned. | | **B. Let the virtual list handle the offset** | Keep the 48‑px translate / padding, **but change the sticky bar to `top: 0`** on mobile. <br><br>``css
@media (max-width: 640px) {
.column-headers-container { top: 0; }
}

````| • Sticky bar is glued to the very top **inside** the list container.<br>• Virtual list’s own padding keeps rows from sliding under the fixed nav. |

*Most teams pick **Option A** because it centralises “where do rows start?” in one place (CSS), but either will work as long as you do **only one** 48‑px shift.*

---

## Step‑by‑step checklist

1. **Open DevTools → Elements** and confirm which element has  
   `transform: translateY(48px)` or `padding-top: 48px`.  
   That’s the virtual‑list wrapper.

2. **Option A implementation**

   * In the file that creates the list (`VirtualVerseList`, `VariableSizeList`, etc.) change the mobile padding/translate to `0`.  

     ```tsx
     const mobileOffset   = 0;       //  was 48
     const desktopOffset  = 64;      //  or whatever you need
     const listOffset     = adaptiveIsMobile ? mobileOffset : desktopOffset;

     <List style={{ transform: `translateY(${listOffset}px)` }} … />
     // or paddingTop: listOffset, depending on your implementation
     ```

   * Leave your existing CSS variable alone:  

     ```css
     :root { --top-header-height-mobile: 48px; }
     .column-headers-container { top: var(--top-header-height-mobile); }
     ```

3. **Option B implementation**

   * Keep the virtual‑list padding/translate as‑is.  
   * Override the sticky bar on mobile:  

     ```css
     @media (max-width: 640px) {
       .column-headers-container { top: 0 !important; }
     }
     ```

4. **Hard‑refresh** (`Ctrl + Shift + R`) and re‑inspect:  
   * The sticky header should now sit exactly **one** header‑height below the browser chrome (or flush, if you chose `top: 0`).  
   * The first verse row should butt immediately against the bottom border of the column header.

---

### Quick sanity test

Add this dev helper, refresh, then remove:

```css
.column-headers-container { outline: 2px dashed red; }
tbody > tr:first-child    { outline: 2px solid lime; }
````

You should see the red bar and the first lime row touching with no extra gap. If they still don’t:

* Double‑check the virtual‑list wrapper’s `style="transform: translateY(...)"`—that value plus CSS `top` must equal **exactly one** 48‑px offset.
* Make sure you’re not adding margins to `<table>` or its wrapper on mobile.

Once you’ve removed the duplicate offset, the mobile column header will lock into the correct position every time.
