Perfect. I’ll audit your theme setup and isolate which themes to remove, which to polish, and where to apply high-impact, low-overhead aesthetics like frosted glass and animated glows. I’ll also identify where the unused 'divine' elements are defined and make recommendations for repurposing or removing them cleanly.

I’ll organize the edits so that nothing breaks, memory use stays optimized, and the look fits your vision of sacred but dynamic study.

I’ll let you know once the review and code recommendations are ready.


## Defined Themes and Status

All theme variants present in the CSS are identified below, with an indication of whether each should be **kept** or **removed** based on the criteria:

* **Light** – **Keep**. (Base light theme; to be updated with modern subtle depth)
* **Dark** – **Keep**. (Base dark theme; to be updated with subtle depth)
* **Sepia** – **Keep**. (Warm reading theme; to be polished with slight depth)
* **Electric** – **Keep (Redesign)**. (Will be reimagined as a dynamic blue/yellow theme)
* **Rainbow** – **Keep**. (Rich animated theme; retain)
* **Aurora** – **Keep**. (Rich animated theme; retain)
* **Ancient Scroll** – **Keep**. (Animated parchment theme; retain)
* **Forest Meadow** – **Keep**. (Animated nature theme; retain)
* **Midnight** – **Remove**. (Dark variant with gold accents – redundant)
* **Cyber** – **Remove**. (Futuristic neon theme – will be dropped)
* **Cyberpunk** – **Remove**. (Similar to Cyber – will be dropped)
* **Forest** – **Remove** (if duplicative). (Older “Ancient Grove” forest theme – superseded by Forest Meadow)
* **Parchment** – **Remove** (optional). (Illuminated manuscript theme – largely covered by Ancient Scroll’s concept)

*(The CSS defines variables for each theme – e.g. `:root.light`, `:root.dark`, `:root.sepia`, `:root.midnight`, `:root.electric`, etc – indicating all the above themes exist, even if some are legacy or duplicates.)*

## Theme Modification Guidelines

Below are the key edits and **scoped** CSS changes for each theme **to keep**, incorporating the requested redesigns. These changes are confined to theme-specific selectors (so other UI elements/layout are unaffected):

### Light Theme – **Keep** (Enhance Depth)

* **Current:** Light mode currently uses a flat white background and minimal styling, which can feel plain.
* **Edits:** Add a very subtle **background gradient** to the Light theme’s background to remove flatness. For example:

  ```css
  /* Light: subtle top-to-bottom gradient */
  body.light-mode {
    background: linear-gradient(180deg, #FFFFFF 0%, #F7F7F7 100%);
  }
  ```

  This introduces a gentle shift from pure white to a slightly off-white (e.g. 99% gray) toward the bottom, adding visual depth with virtually no performance cost.
* Introduce **minimal elevation** for content panels under Light. For instance, apply a faint drop-shadow or border to the main content container (e.g. `.bible-table-wrapper` or columns) scoped to light mode. For example:

  ```css
  .light-mode .bible-table-wrapper {
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    border: 1px solid rgba(0,0,0,0.08);
  }
  ```

  This subtle shadow/border makes the content “card” distinguishable from the background without heavy effects. All changes are limited to the Light theme class, so other themes remain unaffected.

### Dark Theme – **Keep** (Enhance Depth)

* **Current:** Dark mode uses a solid deep gray/black background with flat appearance.
* **Edits:** Apply a **gentle gradient** or vignette in the Dark theme background to avoid a flat look. For example, a slightly lighter shade at the top fading to the default dark at bottom:

  ```css
  body.dark-mode {
    background: linear-gradient(180deg, hsl(222,20%,13%) 0%, hsl(222,20%,8%) 100%);
  }
  ```

  (This uses colors \~5% lighter than the current dark at the top, adding depth.) This gradient remains very subtle to preserve performance (just a static CSS gradient).
* Add **slight elevation** for Dark content areas: e.g., a soft diffuse shadow or a subtle lighter border around containers. In dark mode, even a **1px semi-transparent lighter border** can help delineate sections. For instance:

  ```css
  .dark-mode .bible-table-wrapper {
    border: 1px solid rgba(255,255,255,0.1); /* subtle light border */
  }
  ```

  This gives a hint of structure without introducing bright elements. These edits are scoped to `.dark-mode` only.

### Sepia Theme – **Keep** (Enhance Depth)

* **Current:** Sepia mode provides warm tan tones but is mostly flat color. It uses a serif font for a classic feel, which we’ll preserve.
* **Edits:** Infuse a **slight texture or gradient** to the sepia background to enrich it. For instance, a gentle radial gradient (lighter in center, darker at edges) can simulate aged paper depth without large images. Example:

  ```css
  body.sepia-mode {
    background: radial-gradient(circle, #FDF8EE 60%, #F3E8D2 100%);
  }
  ```

  This creates a subtle vignette (light cream center to deeper parchment at edges). It should be low-contrast to avoid distracting from text. Performance is safe as it’s a simple CSS gradient.
* Optionally, a **faint parchment noise** overlay could be added for realism, but to preserve performance we recommend avoiding heavy opacity layers. A one-time generated subtle noise PNG or SVG could be tiled if needed (small file size), applied with low opacity. This would be scoped to sepia only (e.g., `body.sepia-mode::before`).
* Maintain the current sepia color variables (text, borders, etc.) – just layer the new background effect beneath content. No layout changes, only CSS enhancements within `.sepia-mode`.

### Electric Theme – **Keep (Redesign as Blue/Yellow)**

* **Current:** Electric mode exists with a dark purple background and gold accent, but it’s currently static and somewhat flat.
* **Redesign:** Transform **Electric** into a dynamic, high-contrast theme featuring **rich blue and yellow**. The goal is an “electric” feel (think neon blue and lightning yellow). Key changes:

  * **Color Scheme:** Use a deep **midnight blue** base (for background) and **vibrant yellow** for accents. For example, set `--bg-primary` to a very dark blue (nearly black with a blue tint) and `--accent-color`/`--text-primary` to a bold golden-yellow for pop. E.g.:

    ```css
    :root.electric {
      --bg-primary: #0A0F2C;    /* deep navy */
      --text-primary: #FFFBE6; /* near-white text */
      --accent-color: #FFD800; /* electric yellow */
      /* ...other vars as needed... */
    }
    ```

    (The exact values can be tuned, but a dark blue background with bright yellow highlights meets the brief.)
  * **Dynamic Background:** Introduce an **animated background or glow** to bring the theme to life. For instance, an animated gradient that shifts subtly between different blue tones, with a faint yellow aura. One approach: a CSS `@keyframes` that oscillates background-position or color stops. Example:

    ```css
    body.electric-mode {
      background: linear-gradient(130deg, #0A0F2C, #112D5C, #0A0F2C);
      background-size: 400% 400%;
      animation: electricPulse 10s infinite ease-in-out;
    }
    @keyframes electricPulse {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }
    ```

    This creates a slow-moving blue gradient backdrop (two shades of navy) to simulate an electric current ebbing and flowing. We can also consider a subtle flicker or flash of yellow light at intervals (carefully, to avoid user eye strain). For example, a thin radial gradient of semi-transparent yellow that appears occasionally at random positions (simulating lightning) could be toggled via animation. Any such effect should be **sparing and slow** (to avoid distraction and performance issues).
  * **Frosted Glass Tables:** Because Electric will have an active background, apply a **frosted-glass effect** to data display areas so they remain legible. Specifically, add a translucent backdrop to table containers in Electric mode. For example:

    ```css
    .electric-mode .bible-table-wrapper {
      background: rgba(10,10,40,0.6);        /* semi-transparent navy overlay */
      backdrop-filter: blur(4px);           /* frosted blur effect */
      -webkit-backdrop-filter: blur(4px);
    }
    ```

    This gives the main content a slightly translucent dark overlay that blurs the moving background behind it, acting like frosted glass. It ensures text isn’t lost against background animations. (We use a dark semi-transparent fill in Electric mode so that the yellow text stays high-contrast.)
  * **Performance:** Limit Electric’s animations to mild transitions (e.g. a 10s gradient shift as above). Avoid rapid flickers or heavy drop-shadows. Also wrap any new animations in the existing **reduced-motion media query** so users who disable animations get a static fallback. By confining styles to `.electric-mode` and `:root.electric`, we isolate these changes to the Electric theme only.

### Rainbow Theme – **Keep** (Add Table Backdrop)

* **Current:** The Rainbow theme is a highly animated, colorful background (shifting multi-color gradient) with bright text and even animated rainbow text for verses. Currently, content areas are fully transparent over the background (all default backgrounds are overridden to transparent in animated themes), which can make tables “invisible” against the vivid backdrop.
* **Edits:** **Retain** the Rainbow theme’s prismatic animation (no changes needed to colors or animations). The main improvement is to add a **frosted/translucent backdrop behind data tables** so that content remains readable. We can leverage a similar approach as the menu’s glass effect (the CSS already defines `.glass-menu` with blur). For Rainbow, introduce a rule such as:

  ```css
  .rainbow-mode .bible-table-wrapper {
    background: rgba(255,255,255,0.07);
    backdrop-filter: blur(6px);
  }
  ```

  This inserts a very thin translucent white layer with a slight blur. It will soft-focus the rainbow colors directly behind the text, preventing them from overpowering the content. The opacity (7% white in this example) is low enough that the vibrant background still shows through as context, but the text has a more neutral backdrop to sit on. Increase blur radius slightly (e.g. 6px) to further diffuse loud colors without significantly hitting performance (blur on a relatively small area like the table is acceptable, as opposed to full-screen blur).
* These changes are **scoped to Rainbow mode** (`.rainbow-mode` selector only). No impact on other themes.

### Aurora Theme – **Keep** (Add Table Backdrop)

* **Current:** Aurora (Northern Lights theme) has a dark bluish-green gradient background with subtle animations (soft color flows) and glowing text highlights. As with Rainbow, content areas are transparent currently, which can reduce readability.
* **Edits:** Keep Aurora’s color scheme and animation. Add a **frosted-glass background** for content tables in Aurora mode. For example:

  ```css
  .aurora-mode .bible-table-wrapper {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
  }
  ```

  Here a semi-transparent black is used (around 30% opacity) to backdrop the text, since Aurora’s text is light-colored. The blur (4px) will soften the shifting lights behind content. This ensures aurora’s beautiful background remains visible but not visually competing with text. Scoped only to `.aurora-mode`.
* Aurora already adds a slight text glow effect for verse text; we will preserve that. Ensure the new table backdrop doesn’t interfere with that glow (it won’t, since the glow is on text and backdrop is behind text).
* As with other animated themes, any new visual layer uses `pointer-events: none` and appropriate stacking so it doesn’t affect interactivity (if using pseudo-elements). In this case, applying backdrop blur on the container itself is fine. Performance impact is minimal and the change is contained to Aurora theme.

### Ancient Scroll Theme – **Keep** (Refine Animation)

* **Current:** The Ancient Scroll theme (triggered by `.scroll-mode`) simulates candlelit parchment. It has a parchment color scheme and multiple overlays: a grainy paper texture and a flickering glow effect (a radial gradient that animates to mimic candle flicker). The text is a dark brown serif to match the theme. This creates a great ambiance, but the **flicker rate might be distracting** currently (the animation is 2.5s infinite).
* **Edits:** Preserve the peaceful amber **candlelight ambiance**, but **tone down the flicker** to avoid distraction. Two adjustments:

  * **Slow the flicker animation:** Increase the duration and/or reduce the intensity of brightness change in the `@keyframes flicker`. For example, if it’s 2.5s now, consider 5–6s cycle and make the opacity variation narrower. This will make the glow more subtle. E.g.:

    ```css
    @keyframes flicker {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 0.4; }
    }
    body.scroll-mode::after {
      /* ...existing radial gradient... */
      animation: flicker 6s ease-in-out infinite;
    }
    ```

    A slower, gentler flicker gives the impression of candlelight **without a rapid flicker that draws the eye**.
  * **Slight texture ok:** Retain the parchment texture overlay (the SVG noise grain in `::before`), as it’s subtle and not performance-heavy. If anything, ensure it’s low opacity (which it is at 0.25) so as not to interfere with text. This adds to the ambiance nicely.
* **Frosted table backdrop:** Ancient Scroll already uses an opaque parchment background for content (not transparent like rainbow/aurora). In fact, `--column-bg` in scroll-mode is a semi-translucent parchment paper color, and the theme doesn’t suffer the same contrast issue. We likely **do not need an extra frosted layer** for Scroll theme, since the background is light and text is dark (good contrast), and the flicker is mild after adjustment. If anything, we ensure the content area uses that parchment background (as defined by `--column-bg`) consistently.
* These tweaks are confined to `.scroll-mode` and its pseudo-elements. No other themes are affected. The outcome is a calm flickering candlelight effect and a pleasant aged-paper backdrop without sudden flashes.

### Forest Meadow Theme – **Keep** (Maintain, Monitor Performance)

* **Current:** Forest Meadow (`.meadow-mode`) is a rich animated nature theme with a **sun-dappled canopy** effect. It uses a vertical green-blue gradient as base, and two overlays: a **“sun-ray beams”** layer (`::before`, with soft white radial gradients moving slowly), and **floating pollen particles** (`::after`, tiny white dots drifting with animation). Text is dark green with light highlights, making it readable over the fairly light background. This theme is visually detailed and uses `background-attachment: fixed` for a parallax feel.
* **Edits:** Keep the Forest Meadow theme as it is visually (it meets the “rich animated” criterion well). Focus on **performance-safe tuning**:

  * Ensure the animations for sun-rays (`animation: sunShift 40s linear infinite`) and pollen (`animation: pollen 6s ease-in-out infinite alternate`) are efficient. They seem to be – 40s is very slow (negligible CPU impact) and the pollen animation likely just shifts the background position of the dot pattern. We should maintain these parameters.
  * **Mobile Consideration:** The use of `background-attachment: fixed` could degrade performance on mobile devices (can trigger repaints during scroll). We might conditionally disable `background-attachment: fixed` on mobile screens. For example:

    ```css
    @media (max-width: 768px) {
      body.meadow-mode { background-attachment: scroll; }
    }
    ```

    This way mobile users get a static background (which is still fine), avoiding any jank. On desktop, the fixed background gives the intended parallax depth.
  * No additional frosted glass layer is needed for Forest Meadow’s content, since the background is not overly dark or busy – the dark text on a softly sunlit background is already readable. Just ensure, as is done, that the text has a slight shadow for contrast (the theme already adds a subtle white text-shadow to mimic sunlit pages).
* All these adjustments remain scoped to `.meadow-mode` styles. The theme will continue to provide a rich immersive feel, with the above tweaks guarding against performance issues.

## Removal of Redundant Themes

For the themes marked **Remove**, the recommendation is to eliminate their CSS definitions and any related usage, to streamline the theme options:

* **Midnight** – *Remove*. This theme is essentially a dark variant with a golden accent (see variables ). It overlaps heavily with the standard Dark theme in purpose. Remove the `.midnight-mode` rules and `:root.midnight` variables from the CSS. (Also ensure it’s removed from any theme selection UI so users don’t select it.) This deletion is safe, as Dark theme covers the use-case (if needed, its accent could be adjusted to satisfy what Midnight was for).
  – *Scoped deletion*: Delete the block beginning with `.midnight-mode, :root.midnight { … }` in the CSS, and any related references.

* **Cyber & Cyberpunk** – *Remove*. These neon cyber themes are visually striking, but the plan is to drop them to reduce theme count. They appear in CSS as `.cyber-mode`/`:root.cyber` and `.cyberpunk-mode`/`:root.cyberpunk`. Both share similar styles (monospace font, dark background with neon cyan/magenta accents). Remove all CSS pertaining to `body.cyber`, `body.cyberpunk` and their “-mode” variants, including their color variables and any special verse styling (e.g. the Cyber verse glow overrides).
  – *Scoped deletion*: Delete the `:root.cyber { … }` block and any `:root.cyberpunk` (if defined; in our CSS cyberpunk uses the same block as cyber), as well as the `body.cyber…{…}` block that defines their background gradient and the `body.cyber::before` neon overlay. Also remove the cyber/cyberpunk verse text-shadow overrides (search for `.cyber-mode` in CSS). This ensures no residual neon styling remains.

* **Forest** – *Remove (duplicate)*. The “Forest” theme (labeled **Ancient Grove** in comments) is an older dark-forest theme with amber highlights. We will keep the newer **Forest Meadow**, so this one becomes redundant. Remove `.forest-mode` and `:root.forest` definitions and any related overrides (there are custom verse box styles for forest-mode which can go).
  – *Scoped deletion*: Delete the block starting with `.forest-mode, :root.forest { … }` and its accompanying styled components (look for “forest-mode” in CSS and remove those sections). After removal, “Forest Meadow” will be the sole forest-themed option.

* **Parchment** – *Remove* (if focusing on Ancient Scroll). The Parchment theme (`.parchment-mode`/`:root.parchment`) was designed as an illuminated manuscript style. It includes extensive styling (texture, special verse box styles with golden illumination). Since the **Ancient Scroll** theme covers a similar old-paper aesthetic in a more subtle, animated way, Parchment is not critical. Removing it can simplify the codebase. However, if there is desire to keep a non-animated “fancy parchment” theme, one could retain it; otherwise it’s safe to drop. Assuming removal: eliminate the `.parchment-mode` CSS block and variables and any overrides (search “parchment-mode” – there are custom styles to remove).
  – *Note:* If you choose to keep Parchment for its unique look, it should be updated with the same polish principles (e.g. ensure any flicker is gentle, maybe add a frosted table background because it has heavy textures). But the user criteria did not list it to keep, so removal is recommended to avoid overlap.

By removing the above themes’ CSS and references, we prevent dead code and simplify maintenance. These deletions do not affect other themes (each theme’s styles are in separate rules or variables blocks).

## “Divine” and “Sacred” Header Elements

Near the end of the CSS, there are special classes for header styling, notably `.divine-header`, `.sacred-title`, `.sacred-glow`, and related keyframes (e.g. `divine-glow`, `sacred-shimmer`). These appear to be custom effects for the application’s header (perhaps to give it a heavenly or “divine” feel). We need to determine if these are used, and if not, consider removing or repurposing them:

* **`.divine-header`** – Likely applied to the top banner/header element of the app. It currently applies a multi-color diagonal **gradient background** (gold, orange, purple, blue) and ensures the header has a fixed height (48px on mobile, 60px on desktop). It also is given a high z-index (60) to always sit above other content. This suggests it *is* in use for styling the header bar. We should keep this class if the gradient header is desired, but we might **simplify it**: the gradient is quite bold (gold to royal blue). If that fits the design, fine; otherwise consider a simpler header color. Performance-wise, a static CSS gradient here is fine. No major changes needed except to ensure consistency (there are multiple definitions of `.divine-header` – one earlier setting min-height 80px, and the later one with 48px height – the latter likely overrides the former). We should **remove duplicate/old `.divine-header` rules** and keep one definitive definition (the mobile-first one at the end). In summary: retain `.divine-header` for header styling, possibly tone down its colors if needed, and make sure it’s defined only once.

* **`.sacred-title`** – Presumably used on the title text within the header (for example, the app name or page title). In CSS, it’s given a **shimmering gold text effect**: a gradient across the text with an animation (`sacred-shimmer`) that makes it gleam. Earlier in the CSS it was just white text with a glow shadow, but the final definition replaces that with the gradient shimmer. We should verify if the header title element has class `sacred-title`. If it is used and the effect is desired, keep it. It adds a nice touch without harming performance (just a text gradient with animation). If it’s **not used** or feels too flashy, it could be removed. One idea if unused: repurpose the `sacred-shimmer` effect for hover states or loading indicators elsewhere, or drop it entirely to simplify. Given it’s isolated to an element with class `.sacred-title`, removing it won’t affect anything else.

* **`.sacred-glow`** – This class applies an **inner/outer glow effect** (multiple layered shadows in gold/purple) to an element. It looks intended to create a “holy glow” around something (perhaps the header or logo). We need to see if any element actually has `class="sacred-glow"`. If not actively used, it’s essentially dead code and can be removed. If it is used (say on an icon or logo), consider the performance: it has several large shadows which could be slightly costly if applied to a large element, but if just on a small logo, it’s fine. It also uses a `::before` pseudo-element to overlay a subtle moving light streak (though in the CSS provided, `::before` is static gradient – earlier definitions had an animation on `divine-header::before` for a shimmer). In the final CSS, `.sacred-glow::before` is a static semi-transparent gradient overlay. If the glow effect is not needed, remove both `.sacred-glow` and its `::before`. If it is desired (maybe on a logo or icon to make it glow), we could keep it but ensure it’s only added to that element when needed (to avoid accidental use elsewhere). In short: **remove or repurpose** `.sacred-glow` depending on usage. Since the comment in CSS mentions “Logo is now completely static and peaceful”, it hints they might have decided not to use the animated glow on the logo anymore – so `.sacred-glow` may be leftover. Likely safe to remove it to clean up the CSS.

* **Logo Animations (`.divine-logo-container`, `.heavenly-float`, `.divine-pulse`)** – The CSS earlier defines `.divine-logo-container { animation: spin 8s linear infinite, heavenly-float 4s ease-in-out infinite !important; }` and `.divine-pulse` with a pulsing animation. These suggest the logo initially was spinning and bobbing. However, as noted, a later comment indicates they want the logo static. Therefore: if the logo container in HTML still has class `divine-logo-container`, **remove the spin and float animations** from it. We likely should delete or comment out the rule adding `animation: spin, heavenly-float` to `.divine-logo-container`. Also, the keyframes `spin` and the class `.heavenly-float` (which just applies an up-down animation) can be removed unless used elsewhere. `.divine-pulse` (a scaling pulse animation) similarly seems unused (unless some element still uses it for a halo effect – a quick search in the HTML would tell us, but given no mention in the criteria, it’s probably unused). Remove those if they are not actively applied. This will **simplify the CSS and avoid unnecessary CPU usage** from an invisible animation. If there’s a desire to keep a subtle motion, one could keep just `.heavenly-float` on a small element, but given the direction, it’s better to have the logo truly static now.

**Summary:** Keep the core header class `.divine-header` (for its gradient and positioning) and the `.sacred-title` if the shimmering title is desired. Remove or clean up the rest (`.sacred-glow`, extra animations) if they are not in use. The header will still look appealing (colored gradient background and perhaps shiny title text) but without unused animations. Importantly, these classes are self-contained; removing them won’t affect theme colors or layout beyond the header. If any are removed, also drop their related keyframes (`divine-glow`, `divine-pulse`, etc.) to avoid bloat.

## Performance and Layering Considerations

When implementing the above changes, it’s crucial to maintain **performance-friendly defaults and proper layering**. Here are recommendations applicable across the themes:

* **Z-index and Stacking Contexts:** The CSS already sets up a sensible stacking order for key elements (e.g. `.divine-header` z-index 60, menu at 50, etc.). Honor these when adjusting styles: ensure any new pseudo-element overlays (like frosted glass backgrounds or glow effects) use z-index values that keep them *behind text but above moving backgrounds*. For example, in animated themes we add backdrop blur on `.bible-table-wrapper` – that element sits above the background but behind the text inside it by default (text creates its own layer). If using pseudo-elements for effects, always add `position:absolute` and `z-index` negative or low so they don’t overlap UI elements incorrectly, plus `pointer-events: none` so they don’t block clicks (the provided CSS does this for overlays like Rainbow and Scroll themes). By following the existing pattern (e.g., Rainbow’s overlays at z = -1, Scroll’s at -2/-3), we avoid new stacking issues.

* **Opacity Layers:** Avoid piling multiple full-screen semi-transparent layers, as each can trigger repaints. In our changes, we add at most one extra layer (the frosted glass background for tables) in a given theme. That’s acceptable, but we should not stack many filters. We have removed some unused layers (e.g., sacred-glow overlay, cyberpunk glows) to compensate. The remaining animated themes each use at most 2 overlays (e.g., Forest Meadow uses two, Ancient Scroll uses two). That level is reasonable, but we should refrain from adding more. The frosted glass for tables is localized (just covers the table area, not the whole screen) and thus less costly than a full-screen filter – this is a good trade-off for legibility.

* **Backdrop Filters:** We introduced `backdrop-filter: blur()` for glass effects. Be mindful that heavy blur on large areas can hurt performance on low-end devices. We chose small radii (4–6px) and limited the area (the main content container rather than the entire body). This keeps the impact modest. Also, backdrop-filter is supported in modern browsers; as a progressive enhancement, it’s fine. The CSS already includes `-webkit-backdrop-filter` for Safari compatibility (as seen in `.glass-menu` rules); we should do the same for our new rules. Additionally, it’s wise to set a solid fallback background color (as we did with semi-transparent background) so if blur isn’t supported, the table still has a translucent backdrop. In summary, use blur sparingly and test the performance – our usage is targeted and should be performant.

* **Transitions and Animations:** We maintain the existing smooth transitions for theme changes (the CSS has `transition: background-color 0.3s, color 0.3s…` on all elements). Adding gradients doesn’t break that, but adding new animations (Electric, etc.) means we must ensure they pause if the user prefers reduced motion. The CSS already has a `prefers-reduced-motion` block disabling Rainbow, Aurora, Meadow, Scroll animations. We should append the Electric theme’s animation to that list. For example:

  ```css
  @media (prefers-reduced-motion: reduce) {
    body.electric-mode { animation: none !important; }
    body.electric-mode::before, body.electric-mode::after { animation: none !important; }
  }
  ```

  This way, anyone who turns off animations will get a static Electric theme (just the static gradient or solid background and colors). This is good practice and ensures performance on lower-end devices or user preference scenarios.

* **Testing Layering:** After implementing, test each theme to confirm that content is visible and layering is correct. For instance, in Rainbow/Aurora/Electric, verify that the new blurred background doesn’t accidentally sit above text (it shouldn’t, since it’s applied to the container *of* the text). If it did, adjusting z-index or using a pseudo-element inside the container with `z-index: -1` could solve it. Based on our plan, applying blur on `.bible-table-wrapper` (which is behind its text content by default) should just work. Also test that interactive elements (links, buttons) are not masked by any new layers (our use of `pointer-events: none` on overlays prevents this).

* **Memory and Paint optimizations:** Removing unused CSS (cyber, etc.) helps a bit. More importantly, by reducing unnecessary animations (logo spin, excessive flicker), we reduce CPU/GPU workload. The gradients and slow animations we use are optimized by browsers (especially if we avoid animating expensive properties). For example, animating `background-position` as we do for Rainbow and proposed for Electric is usually hardware-accelerated. We avoid animating properties like `box-shadow` or massive blurs, which are expensive. We also keep most animations to low frequencies (many in the 6s–40s range), which is gentle.

In conclusion, these adjustments and cleanup steps will yield themes that are visually deeper and more polished, while respecting performance and maintaining clean layering. All CSS edits are tightly scoped to theme classes (e.g., `.light-mode`, `.aurora-mode`) or specific header elements, so they won’t interfere with other UI logic or layout.
