Why the table still “blanks-out” instead of streaming rows
VirtualBibleTable is still handing undefined rows to logic that expects a real verse

You deliberately allow holes (undefined) in visibleVerses so the DOM can reserve space before a verse is fetched — that part is good:

ts
Copy
Edit
const visibleVerses = Array.from(
  { length: visibleRange.end - visibleRange.start + 1 },
  (_, i) => verses[visibleRange.start + i]      // ← may be undefined
);            /* turn20file8 L17-L20 */ :contentReference[oaicite:0]{index=0}
…but a few lines later you immediately dereference it:

ts
Copy
Edit
userNote={getUserNoteForVerse(verse.reference)}
highlights={getHighlightsForVerse(verse.reference)}
                   /* turn20file8 L71-L72 */                 :contentReference[oaicite:1]{index=1}
If verse is still undefined when React executes this JSX, the access to verse.reference throws — React bails out of the render and the whole table collapses to white.

VerseRow itself can cope with a missing verse
You already return a nice skeleton when !verse – so the crash occurs before we even reach that component:

ts
Copy
Edit
if (!verse) return <div className="… animate-pulse" />;  /* L38-L45 */
```                                         :contentReference[oaicite:2]{index=2}
Two quick fixes
Fix	Change	Impact
A. Never pass holes	Build the full-length array once and fill in text later: ts export const verses = verseKeys.map((k, i) => ({ id:i, reference:k, text:{} })); and keep that array in React state.	verses[index] is always a stub object, so .reference is safe. This is the cleanest solution and lets you cache text per translation without duplication.
B. Guard the access	Replace the two lines with:
ts const ref = verse?.reference ?? ""; userNote={getUserNoteForVerse(ref)} highlights={getHighlightsForVerse(ref)}	The table won’t crash, but you’ll still get empty columns until the real object arrives. Use only if you can’t refactor the data layer right now.

Where to put the fixed-length array (Fix A)
Create it once in your data-loading module – wherever you currently read verseKeys.json.

ts
Copy
Edit
// verseKeysLoader.ts
import verseKeys from '@/data/verseKeys.json';
export const allVerses: BibleVerse[] = verseKeys.map((key, idx) => ({
  id: idx,
  reference: key,
  text: {},           // filled lazily per translation
  crossReferences: [],
  prophecy: [],
}));
Provide that array (or a react-state copy of it) to <VirtualBibleTable> instead of a slice.

Fetch text into allVerses[index].text[translation] when a row scrolls into view; call setVerses([...allVerses]) just once per fetched batch so React sees the change.

