### What I’m seeing in the screenshot (and why it matters)

| DevTools Pane             | Key detail that jumps out                                                                                                | Why it explains the **8-px drift**                                                                                                                                                                                                     |
| ------------------------- | ------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Elements**              | The `<div class="unified-scroll-container scroll-area">` has the inline style <br>`scrollbar-gutter: stable both-edges;` | That directive **always reserves the full vertical-scrollbar width on *both* the left and right edges** of the element’s *scroll-box*. On Chrome/Win the reserve is 8 px, so the scroll area measures `offsetWidth = clientWidth + 8`. |
| **Styles** (right column) | Under `.bible-verse-row` every row you hover shows <br>`width: 688px; min-width: 688px;`                                 | Rows inherit the *client* width of the scroll area (688 px in your narrow preview). They do **not** include the 8-px gutter.                                                                                                           |
| **Elements** again        | A bit higher up you can see `.tableInner` with <br>`min-width: 720px; width: 720px;`                                     | `tableInner` is getting its width from your **fixed-pixel layout-store constants**, not from the adaptive CSS variables the rows use. 720 − 688 = 32 px (32 = ref + main + x-ref differences you hard-coded).                          |
| **Computed**              | The root element shows custom props such as `--adaptive-main-width: 92px` etc.                                           | That confirms the *adaptive* system is active, but parts of the tree are still on the fixed numbers.                                                                                                                                   |

So the screenshot nicely confirms **two independent effects that add together**:

1. **Scrollbar gutter reservation (8 px)**
   `scrollbar-gutter: stable both-edges;` tells the browser *“always pad me on both sides by the scrollbar width, even when the bar is hidden.”*
   Result: content inside the scroll area is shifted 8 px right, while anything *outside* (e.g. sticky header, side rail) is not. That produces the exact 832 ↔ 840 jump you saw earlier.

2. **Mixed width sources (24 – 32 px depending on break-point)**
   Components that still rely on `COL_WIDTH` constants don’t shrink with the CSS variables, so as the viewport narrows the mismatch grows.

---

### Quick proofs you can run

```js
// 1️⃣  Prove the gutter
const scroller = document.querySelector('.unified-scroll-container.scroll-area');
console.log(scroller.offsetWidth - scroller.clientWidth); // should log 8 (or 17 on FF)


// 2️⃣  See who’s still on the fixed system
[...document.querySelectorAll('[style*="width: 7"]')]  // crude filter for 720/768/840 etc.
  .map(n => ({ tag: n.tagName, width: n.style.width }))
```

---

### Immediate fixes (pick one)

| Option                                  | What to change                                                                                                     | Impact                                                                                                                |
| --------------------------------------- | ------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| **A. Drop the gutter**                  | Remove `scrollbar-gutter: stable both-edges;` from `.unified-scroll-container`.                                    | Rows & header line up instantly; you lose the “layout doesn’t jump when the bar appears” nicety, but only on desktop. |
| **B. Keep gutter but add it to header** | In the header wrapper: <br>`padding-right: env(safe-area-inset-right, 8px); /* or computed JS */`                  | Keeps the no-jump experience; header and body aligned.                                                                |
| **C. Single-width system**              | Remove the pixel constants in `useLayoutStore`; drive everything from the adaptive CSS variables (`--adaptive-*`). | Solves current & future width bugs; one source of truth.                                                              |

---

### Recommended next move

1. **Kill the mixed widths first** (it’s only one file-wide refactor: replace the `COL_WIDTH.*` numbers with reads from `getComputedStyle(document.documentElement)` or, better, stop setting width inline at all and let CSS handle it).
2. Decide if you still like the “layout doesn’t jump when the scrollbar appears” behaviour.
   *If yes*, keep `scrollbar-gutter` but pad the header the same 8 px.
   *If no*, just delete the property.

Run the two console snippets above; once they show `gutter = 0` (or header padded), check that every node’s `.offsetWidth` now matches. Ping me with the results or any file snippet you want annotated, and we’ll close the last pixel gap.
