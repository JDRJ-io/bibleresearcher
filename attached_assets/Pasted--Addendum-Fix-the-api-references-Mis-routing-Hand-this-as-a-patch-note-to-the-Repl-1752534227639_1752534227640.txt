### 🔄 Addendum — Fix the “/api/references” Mis‑routing

Hand this as a **patch note** to the Replit agent before you start the cleanup PRs.

---

## 1  Stop workers from hitting `/api/references/*`

1. **crossReferencesWorker.ts**

   ```diff
   - const resp = await fetch('/api/references/cf1.txt');
   + // main thread sends cf1 text via postMessage (see step 2)
   ```

2. **prophecy worker (or ProphecyColumns loader)**
   Remove any `fetch('/api/references/...')` calls; they will also receive data via postMessage.

No worker should call `fetch(...)` on `/api/*`.

---

## 2  Main thread now loads reference data via BibleDataAPI

```ts
import { BibleDataAPI } from '@/data/BibleDataAPI';

const cf1 = await BibleDataAPI.getCrossRef('cf1');   // returns raw string or structured JSON
crossWorker.postMessage({ type: 'init', data: cf1 }, [cf1.buffer]);
```

*Implement similar logic for prophecy rows/index.*

---

## 3  Remove dead /api route handlers

If your Next.js/Express server has stubs like:

```
app.get('/api/references/:file', …)
```

Delete the entire route folder; it’s no longer needed.

---

## 4  Update BibleDataAPI with hard‑coded Supabase paths

```ts
private crossRefPath(set: 'cf1' | 'cf2') {
  return `references/${set}.txt`;                // Supabase bucket path
}
private prophecyRowsPath = 'references/prophecy_rows.txt';
private prophecyIndexPath = 'references/prophecy_index.json';
```

All data comes from `supabase.storage.from('anointed')`, never `/api`.

---

## 5  Confirm with a smoke test

1. **Clear browser cache**, run `pnpm dev`.
2. Open DevTools > Network:

   * You should *not* see any request to `/api/references/*`.
   * You *should* see signed URLs for `references/cf1.txt`, `prophecy_rows.txt`, etc.
3. Cross‑reference column populates; no 404s.

---

### Combine this patch with the **refactor checklist** I gave earlier.

Execute the merge sequence (PR‑A → PR‑D) *after* correcting the worker fetch paths and you’ll have a single, conflict‑free data flow: **Supabase ➜ BibleDataAPI master cache ➜ components/workers**.
