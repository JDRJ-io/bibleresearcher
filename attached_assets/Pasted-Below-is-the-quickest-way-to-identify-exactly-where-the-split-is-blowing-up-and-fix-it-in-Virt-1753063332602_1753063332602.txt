Below is the quickest way to **identify exactly where the `.split` is blowing up and fix it in `VirtualRow.tsx`**. (I read through the file you pasted; the only `.split()` call I can see is `config.type.split('-')[1]` inside the *prophecy* branch.)

---

## 1 Re‑enable Vite’s stack trace for the row component

Add a single `debugger;` statement just before the switch to freeze execution on the failing row:

```tsx
// … inside renderSlot
const { slot, config, widthRem } = column;

// ⬇️ add this line
debugger;

const isMain = config.translationCode === main;
```

Reload the page, click **“Resume script”** once; when the error fires Vite will
stop on that debugger line and the console will show the exact values of
`config`. You’ll probably see `config` or `config.type` is `undefined`, which
causes `.split` to fail.

---

## 2 Guard the only `.split` call

Replace

```tsx
const type = config.type.split('-')[1].toUpperCase() as "P" | "F" | "V";
```

with

```tsx
let type: "P" | "F" | "V" | undefined;
if (config?.type?.startsWith('prophecy-')) {
  type = config.type.split('-')[1].toUpperCase() as "P" | "F" | "V";
} else {
  console.warn('VirtualRow: unexpected config.type', config);
  return null;         // skip this slot gracefully
}
```

Now even if `config.type` is undefined or malformed, the row won’t crash the whole page.

---

## 3 Why `config` becomes undefined

`visibleColumns` is built from every key in `slotConfig`, **including keys that were never filled** when a column is toggled off. Those undefined slots bubble
into `renderSlot`.

Add a final filter before `map`ping:

```tsx
const visibleColumns = Object.entries(slotConfig)
  .filter(([_, cfg]) => cfg && cfg.visible !== false)   // <‑‑ keep only real configs
  .map(([slotStr, cfg]) => ({ slot: +slotStr, config: cfg, widthRem: getDefaultWidth(+slotStr) }))
  .sort((a,b)=>a.slot-b.slot);
```

This prevents undefined `config` from ever reaching the switch.

---

## 4 Remove the `debugger;` once it works

After verifying the page loads with no “split” error, delete the temporary
debugger line so you don’t pause every row render in production.

---

### What to tell the agent

> “Add the `cfg && cfg.visible` guard to the `visibleColumns` construction in **VirtualRow\.tsx** and wrap the `config.type.split('-')` call with a safety check. This prevents undefined `config` from triggering ‘Cannot read properties of undefined (reading "split")’.”

With those two guards in place the fatal `.split` error disappears and you can
continue measuring performance.
