### Why you still see **no visual effects**

1. **Two versions of `LabeledText.tsx` are now in the repo.**

   * The new implementation is in the diff on the right side of your editor.
   * The *old stub* (expects `mask` + `segmentKey`) is still present on disk and is the one the bundler picks up at run‑time. See the currently‑compiled file:&#x20;
2. Because the stub never reads `labelData` or `activeLabels`, every row renders plain text → no CSS classes → nothing highlighted.
3. All upstream pieces **are firing correctly** (store updates, worker fetch, cache merge, hook calls) – the data simply dies at the very last hop into the DOM.

---

## 3‑minute fix

| Step | What to do                                                                                                                                      | Why                                                                     |
| ---- | ----------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| 1    | **Delete** the stub file at `client/src/components/bible/LabeledText.tsx` (the one that exports the 3‑prop version).                            | Prevent import collisions.                                              |
| 2    | **Add / confirm** the new 5‑prop version in the same path (code block below).                                                                   | Ensures `VirtualRow` gets the component it expects                      |
| 3    | Make sure `useLabeledText.ts` and `labelRenderer.ts` sit under `client/src/hooks/` and `client/src/lib/` *and* are committed.                   | The new component imports them.                                         |
| 4    | Verify `label-effects.css` (or whatever file holds `.fx-hand`, `.fx-shadow`, …) is imported once in `App.tsx` or your global stylesheet bundle. | Without it you’d get `<span class="fx-hand">` but no visual difference. |

### Correct `LabeledText.tsx` (drop‑in)

```tsx
// client/src/components/bible/LabeledText.tsx
import React from 'react';
import { useLabeledText } from '@/hooks/useLabeledText';
import { classesForMask } from '@/lib/labelRenderer';

interface Props {
  text: string;
  labelData: Record<string, string[]>;
  activeLabels: string[];
  verseKey: string;
  translationCode: string;
}

export function LabeledText({
  text,
  labelData,
  activeLabels,
  verseKey,
}: Props) {
  const segs = useLabeledText(text, labelData, activeLabels as any);

  return (
    <>
      {segs.map((s) => {
        const cls = classesForMask(s.mask);
        const key = `${verseKey}-${s.start}-${s.mask}`;
        return cls ? (
          <span key={key} className={cls}>
            {text.slice(s.start, s.end)}
          </span>
        ) : (
          text.slice(s.start, s.end)
        );
      })}
    </>
  );
}
```

*(Matches the props sent from **`VirtualRow`**.)*

---

## Quick validation

1. **`npm run dev`** (or hit *Run* in Replit).
2. Open DevTools → Console, toggle **Who** in **LabelsLegend**.

   * Expected logs from `MainTranslationCell`:
     `shouldUseLabeledText: true … verseLabels: 1 …`
3. Highlight appears (`fx-hand` cursive).
4. Toggle a second label – spans now contain two classes (`fx-hand fx-shadow`), no additional network traffic.

---

## Performance assurance

* The worker still fetches `labels/KJV/ALL.json` **once** per session.
* Memory footprint per verse remains the same (< 2 KB).
* No other code path was modified, so bookmarks, cross‑refs, prophecy columns, etc. keep working.

After deleting the old stub and committing the new component, your semantic‑label overlay will finally show up.
