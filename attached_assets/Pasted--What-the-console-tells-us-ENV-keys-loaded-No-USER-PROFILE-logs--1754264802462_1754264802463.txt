### What the console tells us

* **ENV keys** – loaded ✔
* **No `USER ↩️` / `PROFILE ↩️` logs** – your `useMyProfile` hook never ran (because you never reached `/profile`, or it bailed early).
* Lots of **Bible-data logs** ending with *actually fetching metadata/verseKeys-canonical.json* – that file fetch is probably **404** or **403**, so the spinner never stops.

---

Below is a focussed two-part fix.
**Part A** gets `/profile` working, **Part B** fixes the Bible spinner.
Follow in order; after each bullet **reload** and check the console.

---

## PART A Reach the Profile page & load the row

1. **Route exists?**
   Make sure you still have a route file at `src/pages/profile.tsx`
   (or `app/profile/page.tsx`). If you renamed it during cleanup, add it back.

2. **Redirect loop?**
   If you have logic that pushes away when `profile === null`, comment it out until this test is done. The component must mount and call `useMyProfile`.

3. **Add the log lines again** (just for test):

   ```ts
   const { data: { user }, error: uErr } = await supabase.auth.getUser();
   console.log('USER ↩️', user, uErr);

   const { data, error } = await supabase
     .from('profiles')
     .select('name,bio,tier')
     .eq('id', user!.id)
     .single();
   console.log('PROFILE ↩️', data, error);
   ```

4. Reload **/profile** and look:

   | Console shows                                           | Meaning                                                                                                                       | Fix |
   | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | --- |
   | `USER ↩️ null`                                          | No session in this tab. Click a fresh magic link → be sure `/auth/callback` prints “Signing you in…” then try /profile again. |     |
   | `USER ↩️ {…}` + `PROFILE ↩️ {name:…, tier:'free'} null` | ✔ Data arrived. Remove logs, call `setLoading(false)` after `setProfile(data)` so the spinner disappears.                     |     |
   | `PROFILE ↩️ null { code:'42501' … }`                    | RLS still wrong – run the **drop + create policy** block one more time.                                                       |     |

When `PROFILE` shows real data and `error` is **null**, the Name/Bio fields will populate and Save will work (they use the same client).

---

## PART B Stop the Bible “loading…” spinner

1. **Open DevTools → Network** → filter by **Fetch/XHR**.
   Reload `/` and watch for the first **red** request. Usually:

   * `/storage/v1/object/public/anointed/metadata/verseKeys-canonical.json`
     **Status 404 or 403**

2. **Fix 403/404 for storage**

   *Dashboard → Storage → Buckets*

   * Bucket name = **anointed**?
     *If your code requests `metadata/…` inside that bucket, the bucket must be named `anointed`.*

   * In bucket settings, toggle **Public** = **ON**.

   * Then run once:

     ```sql
     drop policy if exists anon_read_anointed on storage.objects;
     create policy anon_read_anointed
       on storage.objects
       for select using (bucket_id = 'anointed');
     ```

   * If the request was 404, also open the bucket and confirm the file path `metadata/verseKeys-canonical.json` actually exists (case-sensitive).

3. **Reload** – the red request should turn **green 200** (size > 0 kB) → Bible verses render, spinner gone.

---

### Quick verification table

| Page                   | What you should now see                                 |
| ---------------------- | ------------------------------------------------------- |
| `/profile`             | Name/Bio fields filled; Save button changes DB          |
| `/dev` (flag **true**) | Redeem code returns `{message:"ok"}` and tier → premium |
| `/dev` (flag absent)   | 404 Page Not Found                                      |
| `/` Bible              | verses show; no infinite “Loading Scripture…”           |

If **any single** Network request is still red, click it and copy:

* Method / URL
* Status code
* Response body (JSON or HTML)

Paste that info here, and I’ll give you the exact one-line fix.
