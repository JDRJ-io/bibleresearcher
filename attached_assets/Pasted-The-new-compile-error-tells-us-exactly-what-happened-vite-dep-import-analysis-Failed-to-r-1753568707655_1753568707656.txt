The new compile error tells us exactly what happened:

```
[vite:dep-import-analysis] Failed to resolve import "./LabeledText"
from "client/src/components/bible/VirtualRow.tsx": Does the file exist?
```

* **`VirtualRow.tsx`** still contains

  ```ts
  import LabeledText from './LabeledText';
  ```
* But there is **no longer a file called `client/src/components/bible/LabeledText.tsx`** (you deleted it).

Remember: we never wanted to *remove* that module — we wanted to **replace** the old three‑prop stub with the new five‑prop implementation **under the same filename and path**, so every existing import keeps working.

---

## Quick‑fix (30 seconds)

1. **Re‑create** `client/src/components/bible/LabeledText.tsx` with the new code:

```tsx
import React from 'react';
import { useLabeledText } from '@/hooks/useLabeledText';
import { classesForMask } from '@/lib/labelRenderer';

interface Props {
  text: string;
  labelData: Record<string, string[]>;
  activeLabels: string[];
  verseKey: string;
  translationCode: string;
}

export default function LabeledText({
  text,
  labelData,
  activeLabels,
  verseKey,
}: Props) {
  const segs = useLabeledText(text, labelData, activeLabels as any);

  return (
    <>
      {segs.map((s) => {
        const cls = classesForMask(s.mask);
        const key = `${verseKey}-${s.start}-${s.mask}`;
        return cls ? (
          <span key={key} className={cls}>
            {text.slice(s.start, s.end)}
          </span>
        ) : (
          text.slice(s.start, s.end)
        );
      })}
    </>
  );
}
```

2. **Save** the file.
3. **Restart** the dev server (Stop → Run in Replit, or `npm run dev`).

---

### Why this resolves the issue

* `VirtualRow.tsx` keeps its original import path (`./LabeledText`), so no other file needs editing.
* The new component exports **`default`**, matching the original import style.
* All upstream bits (useLabeledText hook, labelRenderer, worker) are already in place and compile.

Once the file is restored:

1. The build succeeds.
2. Toggle **Who** or **What** in the Labels panel → spans like
   `<span class="fx-hand">God</span>` appear.
3. No extra network or memory spikes; everything runs smoothly.

If you still don’t see the visual effect but spans have the correct classes, confirm `label-effects.css` is imported once globally so the styles are loaded.

That’s the last missing piece — add the file back, restart, and the overlay will render.
