`404 /api/users/bookmarks` means **your front-end is posting to a local API
route that isn’t wired up at all**—the request never even reaches Supabase,
so RLS/columns/SQL are irrelevant.

You now have two choices:

| Path                                          | What to do                                                                             | When it makes sense                                                                                     |
| --------------------------------------------- | -------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| **A — Skip the custom route** (simplest)      | Call Supabase **directly** from the client (one line).                                 | You don’t need server-side filtering or secret keys; every bookmark belongs to the signed-in user only. |
| **B — Keep the `/api/users/bookmarks` route** | Add a server handler (Express / Vite dev server) that forwards the insert to Supabase. | Only if you absolutely want a thin server layer or you plan to do server-side validation.               |

Below are the exact snippets for **either** path — pick one, not both.

---

## A · Remove the custom route (recommended)

### 1  Replace the React-Query mutation

```ts
// TopHeader.tsx  (or wherever you call it)
import { supabase } from '@/lib/supabaseClient';
import { useAuth } from '@/contexts/AuthContext';
import { useVerseNav } from '@/hooks/useVerseNav';
import { useMutation } from '@tanstack/react-query';

const { user }       = useAuth();
const { anchorIndex } = useVerseNav();

const saveBookmark = useMutation({
  mutationFn: async (payload: { name: string; color: string }) => {
    const { error } = await supabase
      .from('bookmarks')
      .insert({
        user_id:     user!.id,        // snake_case
        name:        payload.name,
        index_value: anchorIndex,
        color:       payload.color,
      });

    if (error) throw error;
  },
  onSuccess: () => toast.success('Bookmark saved!'),
  onError:   (err) => {
    console.error(err);
    toast.error('Failed to save bookmark');
  },
});
```

### 2  Delete the `fetch('/api/users/bookmarks'… )` call

A global search/replace for that path should leave no matches.

### 3  Hard-refresh → click **Save Bookmark**

Network tab will show
`POST https://<project>.supabase.co/rest/v1/bookmarks 201 Created`.
Toast goes green.

---

## B · Keep the API route (if you really want it)

### 1  Create the file `server/index.ts` (Express example)

```ts
import express from 'express';
import { createClient } from '@supabase/supabase-js';

const app = express();
app.use(express.json());

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!   // needs insert rights
);

app.post('/api/users/bookmarks', async (req, res) => {
  const { user_id, name, index_value, color } = req.body;
  const { error } = await supabase
    .from('bookmarks')
    .insert({ user_id, name, index_value, color });

  if (error) return res.status(400).json(error);
  res.status(201).json({ message: 'ok' });
});

app.listen(3001, () => console.log('API listening on 3001'));
```

### 2  Run the server alongside Vite

```bash
node server/index.js    # or ts-node-dev if using TS
```

### 3  Change the front-end URL to match

```ts
await fetch('/api/users/bookmarks', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ user_id: user.id, name, index_value, color }),
});
```

*(If you’re on Replit and Vite proxies `/api` to port 3001, your 404 will turn into 201.)*

---

## Kill the `/api/slice-data` spam (independent of bookmarks)

Search for `"/api/slice-data"` and remove/comment that fetch; otherwise the
console will stay noisy but it won’t affect bookmark saving.

---

### Quick checklist to verify

1. **Network tab** shows exactly one request:
   *Path:* `/rest/v1/bookmarks` **or** `/api/users/bookmarks` (your choice)
   *Status:* **201 Created**
2. Toast: “Bookmark saved!”
3. No more `404 /api/users/bookmarks`
4. (Optional) No more `404 /api/slice-data`

Pick path A or B, update the code, and you’re unblocked. If the new request
still fails, paste the *response JSON* (Supabase or Express error) and we’ll
zero in on that.
