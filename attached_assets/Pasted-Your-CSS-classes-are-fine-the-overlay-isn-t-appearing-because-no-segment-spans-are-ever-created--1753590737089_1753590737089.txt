Your CSS classes are fine—the overlay isn’t appearing because **no segment spans are ever created**.
That happens only when `useLabeledText` receives non‑empty `labelData`.
Right now `labelData` reaches `<LabeledText>` as `{}` (you saw that in the
`LabeledText Debug` log).

So the bottleneck is **not** the worker’s “bitmap” generation; it’s in the step
that copies data from the worker‑populated cache into the props that
`VirtualRow` passes down.

---

## Where the system *should* flow

```
Supabase  ALL.json
      ↓  (worker fetch, lower‑cases keys)
labelsCache[tCode]          ← must contain { 'Gen.1:1': { what:[…] } }
      ↓ (getLabelsForVerses)
labelData prop in VirtualRow ← MUST be that same object
      ↓
useLabeledText → segments   ← turns phrase list into bitmap ranges
      ↓
<span class="fx-shadow">…</span>
```

---

## What the console shows

* Worker fetch succeeds (`allWords: 22830, uniqueContextKeys: 181` etc.)
* `labelData` arriving at *LabeledText* is `{}`
  → **break is between cache and props**

---

## Likely causes

| Mismatch                                                                             | Symptom                                                                                          | One‑line fix                                                                                                      |
| ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------- |
| **Translation code** stored as `"KJV"` but looked‑up as `"kjv"`                      | `console.log(Object.keys(cache))` shows upper‑case; `tCode` in `useViewportLabels` is lower‑case | `const normT = tCode.toUpperCase();` in both store and lookup                                                     |
| **Verse key** stored as `"Gen.1:1"` but looked‑up as `"Gen 1:1"`                     | `console.log(verseKey)` inside VirtualRow shows a space                                          | Normalise: `.replace(/\s+/g,'').replace(/ /g,'.')` in both places                                                 |
| **Label name** stored as `"what"` but your `activeLabels` array has `"What"` (cap‑W) | `console.log(activeLabels)` shows capital                                                        | Lower‑case on toggle: `setActiveLabels(labels.map(l=>l.toLowerCase()))` or lower‑case inside `getLabelsForVerses` |

Your latest diff screenshot shows helper functions
`normaliseVerseKey()`, `normaliseLabel()`, `normaliseTCode()` **but they’re
only used on the *store* path** (green code); the **read** path in
`getLabelsForVerses()` is still the old code on the left (red).
That’s why cache fills but lookup returns nothing.

---

## Concrete patch (in `labelsCache.ts`)

```ts
export function getLabelsForVerses(
  tCodeIn: string,
  verseKeys: string[],
  active: LabelName[]
): SlimMap {
  const tCode = normaliseTCode(tCodeIn);      // ← ADD
  const map   = cache[tCode] || {};

  const out: SlimMap = {};
  verseKeys.forEach(vk => {
    const key = normaliseVerseKey(vk);        // ← ADD
    const entry = map[key];
    if (!entry) return;

    const slim: Partial<SlimEntry> = {};
    active.forEach(lbl => {
      const l = normaliseLabel(lbl);          // ← ADD
      if (entry[l]) slim[l] = entry[l];
    });
    if (Object.keys(slim).length) out[key] = slim;
  });
  return out;
}
```

Do the same normalisation in **`useViewportLabels`** when you call
`ensureLabelCacheLoaded`.

---

## After the patch

1. **Refresh**, toggle **“WHAT”**.

2. DevTools console should now log inside `LabeledText`:

   ```js
   labelData { what: ['the heaven','the earth'] }
   segs      [ {start:8,end:19,mask:0x002}, … ]
   ```

3. Elements panel shows:

   ```html
   <span class="fx-shadow">the heaven</span>
   ```

4. CSS you already wrote kicks in: shadow + outline.

---

## To verify step‑by‑step

```js
// in the browser console
window._dbg = cache.KJV['Gen.1:1']          // <-- should show { what: […] }
```

If that object has data, and `getLabelsForVerses` now returns the same object,
highlights will render.

---

### Summary

* Worker already “generates the bitmap” (phrase arrays).
* Cache **has** the data.
* Lookup path still uses non‑normalised keys → delivers `{}` to renderer.
* Add normalisation on the *read* side (patch above) and the overlay appears.

Apply those three `.toUpperCase()` / `.replace()` lines in
`getLabelsForVerses` and `useViewportLabels`, refresh, and you’ll see the
semantic highlights immediately.
