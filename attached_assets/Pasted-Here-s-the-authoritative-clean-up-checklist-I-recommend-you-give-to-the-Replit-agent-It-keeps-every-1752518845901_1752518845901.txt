Here’s the authoritative clean-up checklist I recommend you give to the Replit agent.
It keeps every file in Supabase Storage, keeps the new worker + cache path we just finished, and removes only the legacy code that causes duplicate downloads.

⸻

A. Files / functions to DELETE

1  Translations

File	Function(s)	Why safe to delete
client/src/lib/supabaseLoader.ts	loadTranslationSecure	Signed-URL path—duplicate of public fetch.
client/src/hooks/useBibleData.ts	loadTranslationData	Mobile-only duplicate; replaced by translationCache.ts.
(if present) client/src/lib/translationLoader.ts	whole file	Another early spike; now redundant.

2  Cross-References

File	Function	Why safe to delete
client/src/data/BibleDataAPI.ts	loadCrossRefSlice	Marked deprecated; superseded by crossRefWorker.ts.
client/src/lib/supabaseLoader.ts	loadCrossReferences	Duplicate full-file fetch.

3  Prophecy

File	Function	Why safe to delete
client/src/data/BibleDataAPI.ts	loadProphecySlice	Deprecated.
client/src/lib/supabaseLoader.ts	loadProphecyIndex, loadProphecyRows	Duplicate of new cache logic.

4  Unused recent experiments

File	Why delete
client/src/hooks/useMobileOptimizedBible.ts and client/src/lib/mobileOptimizer.ts	Just-created stubs; superseded by range worker pattern if we need it later.

Do NOT delete
	•	scripts/build_offsets.py (needed any time you regen cf1_offsets.json etc.)
	•	crossRefWorker.ts, prophecyCache.ts, translationCache.ts

⸻

B. Files to KEEP (single sources of truth)

Domain	Keep this loader	Where it’s called
Translations	lib/translationCache.ts (ensureTranslation())	BibleDataProvider, useTranslationMaps
Cross-Refs	workers/crossRefWorker.ts	useSliceDataLoader.ts
Prophecy	lib/prophecyCache.ts	useSliceDataLoader.ts



⸻

C. Small code edits the agent should apply
	1.	Fix worker fetch paths
All references must be /references/<file>
(Remove the stray /api/references/ the agent generated.)
	2.	Render prophecy arrays
In ProphecyColumns.tsx:

<td>{row?.P?.join('; ')}</td>
<td>{row?.F?.join('; ')}</td>
<td>{row?.V?.join('; ')}</td>


	3.	Single translation cache call in BibleDataProvider (desktop) and useTranslationMaps.ts (pre-loader):

await ensureTranslation(activeLang);



⸻

D. One-time search-and-replace after deletion

# Remove dangling imports
grep -R "loadTranslationSecure" src/
grep -R "loadTranslationData" src/
grep -R "loadCrossRefSlice" src/
grep -R "loadProphecySlice" src/

Replace each with the correct cache or worker call, or delete if obsolete.

⸻

E. How to instruct the agent

“Please delete the files / functions listed under section A, keep and wire only the loaders listed under section B, and apply the small edits in section C. After the refactor there should be exactly one network request per translation (desktop) and the worker + cache for cross-refs and prophecy.”

⸻

After it runs
	1.	DevTools → Network
	•	Each translation loads once.
	•	/references/cf2.txt 200 and /references/cf1.txt range 206.
	•	/references/prophecy_index.txt & /references/prophecy_rows.json load once.
	2.	UI
	•	Cross-reference badge counts show.
	•	Prophecy columns populate.

If those are green, the consolidation is complete and your load path remains just as fast—without the memory and bandwidth waste.