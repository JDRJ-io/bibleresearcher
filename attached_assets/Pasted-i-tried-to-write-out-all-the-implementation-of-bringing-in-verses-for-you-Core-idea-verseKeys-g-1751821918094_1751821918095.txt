i tried to write out all the implementation of bringing in verses for you;
Core idea

verseKeys gives you the ordered IDs.

Translation maps give you the strings.

The UI only ever handles IDs; workers and caches handle the strings.

#### 1  Main vs alternate contract

There is always exactly one “main translation.”

Every secondary feature that needs verse text—cross‑references, prophecy drawers, date column tooltips—must read it only from the main translation’s map.

All other languages the user toggles on are rendered as extra horizontal columns; they never influence secondary data sources.

#### 2  Translation map lifecycle (verse fetching)

User toggles a language ON
• Check resourceCache for its file‑code key.
• If absent, request the entire 4 MB translations/{CODE}.txt.
• Parse off‑thread into Map<verseID,text> and store the map in resourceCache.
• Push the file‑code onto activeTranslations (top of the array if “Set as Main”, otherwise append).

Subsequent scrolls
• loadChunk(anchorIndex, buffer) delivers the current 150–250 verseIDs.
• For each ID the renderer does a direct map.get(id) against the main map and, if present, against each alternate map.
• Because the maps are already in RAM, no per‑verse fetch ever occurs.

Prefetch optimisation
• When the user scrolls, the app may pre‑warm the next ±250 IDs for any translation map still loading, but it must never start a network request per ID—whole‑file fetch only.

User toggles a language OFF
• Remove its file‑code from activeTranslations.
• Keep its map in resourceCache to avoid another download in the same session.
• Unmount the column visually; no other component changes.

#### 3  Cross‑ref & prophecy look‑ups

They signal verseID → need mainText.

Resolve the text by reading only from the main translation map currently at index 0 of activeTranslations.

If the user promotes a different language to main, these components automatically display the new language because their look‑ups always hit index 0.

#### 4  Persistence handshake

On logout → revert to guest default ["KJV"]; clear activeTranslations but leave translation maps cached.

On login → read settings.mainTranslation and settings.alternateTranslations and rebuild the array before first verse render.

#### 5  Success diagnostics

Network tab shows one request per translation file ever toggled on; never more.

Scrolling across the entire Bible does not add requests.

Switching main translation at Genesis 1 automatically changes the cross‑reference drawer text at Revelation 22 without additional fetches.

One‑liner

“We fetch each translation once, keep it in memory as a verseID→text map, always read secondary features from the main map, and let alternates be pure side‑by‑side columns.”