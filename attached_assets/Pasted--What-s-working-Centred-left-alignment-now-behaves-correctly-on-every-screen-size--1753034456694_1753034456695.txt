### ‚úÖ‚ÄÉWhat‚Äôs working

* **Centred‚ÄØ‚á¢‚ÄØleft alignment** now behaves correctly on every screen size.
* Reference column is sticky and never scrolls out of view.

### üü¶‚ÄÉNext (final) touches

| Goal                                                                  | Code change                                                                                                                                                                                                                                                                                                                          | Why |
| --------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --- |
| **1‚ÄÇAlways show horizontal scrollbar when table wider than viewport** | `overflow‚Äëx:auto; overflow‚Äëy:hidden;` is already set on `.bible‚Äëtable‚Äëwrapper`; the scrollbar is present but WebKit hides it until you start scrolling. <br>**Add**:  `css  .bible-table-wrapper::-webkit-scrollbar { height: 8px; }  ` <br>This forces the bar to stay visible (8‚ÄØpx) giving users the cue that more columns exist. |     |
| **2‚ÄÇDual‚Äëcolumn portrait view exactly like the mock‚Äëup**              | Add a **utility class** that is toggled below 640‚ÄØpx (`@media (max-width:639px)`).  `css  .dual-col { width: calc(var(--colW) * 2); }  .dual-col .cell-ref { position:sticky; left:0; }  ` <br>‚Üí‚ÄØwrapper width‚ÄØ=‚ÄØ2‚ÄØcolumns, Ref always visible.                                                                                      |     |
| **3‚ÄÇRotate reference text to vertical on phones**                     | `css  @media (max-width:639px){ .cell-ref span { writing-mode:vertical-rl; transform:rotate(180deg); } } `                                                                                                                                                                                                                           |     |
| **4‚ÄÇSmooth snap between columns**                                     | Inside `VirtualBibleTable`, when `dualMode && isMobile`, add:  `jsx  wrapperRef.current.scrollTo({ left: Math.round(wrapperRef.current.scrollLeft / colW)*colW, behavior:'smooth'});  `  in the `touchend` handler.                                                                                                                  |     |
| **5‚ÄÇHide unused column slots**                                        | Slot grid already allocates widths only for toggled columns. No blank gaps will appear; nothing to do.                                                                                                                                                                                                                               |     |

### Single‚Äêfile diff‚ÄØ‚Äî‚ÄØ`index.css` (add to the bottom)

```css
/* --- mobile dual‚Äëcolumn tweaks --- */
@media (max-width:639px){
  .dual-col {                 /* applied via React when <640px */
    width: calc(var(--colW) * 2);
    overflow-x: auto;
    scroll-snap-type: x mandatory;
  }
  .dual-col::-webkit-scrollbar{ height:8px; }

  .cell-ref{
    position: sticky;
    left: 0;
    z-index: 10;
  }
  .cell-ref span{
    writing-mode: vertical-rl;
    transform: rotate(180deg);
  }
}

/* keep horizontal bar visible on desktop too */
.bible-table-wrapper::-webkit-scrollbar{ height:8px; }
```

### React toggle (2‚ÄØlines)

```tsx
// BiblePage.tsx ‚Äì after computing visibleColumns
const mobileDual = window.innerWidth < 640;
<div ref={wrapperRef}
     className={`bible-table-wrapper ${mobileDual ? "dual-col" : ""}`}>
```

---

## What to tell the AI agent

> 1. **Do not create new files** ‚Äì only modify `index.css` and
>    `BiblePage.tsx` as above.
> 2. **Add the CSS block** for dual‚Äëcolumn and always‚Äëvisible scrollbar.
> 3. **Add the ‚Äúdual‚Äëcol‚Äù class toggle** when `innerWidth¬†<¬†640‚ÄØpx`.
> 4. No other structural changes; slot & cache logic stay as‚Äëis.
> 5. Verify on iPhone portrait: Ref + one column visible, horizontal swipe
>    snaps to the next column; scrollbar always visible.

Once those two edits are in place the layout will:

* centre with ‚â§‚ÄØ3 columns,
* left‚Äëalign & scroll with >‚ÄØ3 columns,
* show the dual‚Äëcolumn portrait view exactly like your mock‚Äëup.

Let me know when you‚Äôre ready to move to the next refinement.
