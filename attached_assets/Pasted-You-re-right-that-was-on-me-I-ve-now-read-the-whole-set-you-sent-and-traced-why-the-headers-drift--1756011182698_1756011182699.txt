You’re right—that was on me. I’ve now read the whole set you sent and traced why the headers drift, why alt translations don’t participate in the left/right nav, and why the “#” column can slide off. Below are the concrete fixes with exact patches.

## Root causes (with receipts)

1. **Cross-refs ID mismatch (header vs rows).**
   Rows emit `data-col-key="cross-references"` while headers use `id="cross-refs"`. That breaks column snapping/selectors and header/body sync. &#x20;

2. **Main vs “main-translation” mismatch in mobile header CSS.**
   Your main header rules in `mobile-headers.css` target `data-column="main"` but everything else (and the DOM) uses `main-translation`. So main’s width on mobile isn’t applied correctly.&#x20;

3. **Alt translation width: header uses MAIN width var; cells use ALT width var.**
   Header rule `.column-header-cell[data-column*="translation"]` forces **main** width for *all* translations; cells correctly use `--adaptive-alt-width`. That’s the “quarter-column” offset you’re seeing when alts appear. &#x20;

4. **Nav list uses human labels instead of canonical keys.**
   `VirtualBibleTable` currently sets navigables like `["KJV","CrossRefs",…]` instead of the IDs your scroller + headers use (`"main-translation"`, `"cross-refs"`, …). So the arrows don’t recognize alt translations at all.&#x20;

5. **“#” column not pinned.**
   No sticky-left rules are applied to `[data-column="reference"]` in headers/rows, so it can scroll off.

---

## Patches

### A) `VirtualRow.tsx` — unify IDs for cross-refs

**Change “cross-references” → “cross-refs” in the row’s column ID.**

```diff
--- a/VirtualRow.tsx
+++ b/VirtualRow.tsx
@@
-        case 'cross-refs':
-          return 'cross-references';
+        case 'cross-refs':
+          return 'cross-refs';
```

This makes row cells and headers agree (`cross-refs`). &#x20;

---

### B) `VirtualBibleTable.tsx` — give nav the real column keys (and include alts)

Replace the human labels with the canonical IDs your header/row markup uses, and append all alternates:

```diff
--- a/VirtualBibleTable.tsx
+++ b/VirtualBibleTable.tsx
@@
-  useEffect(() => {
-    // Update fixed and navigable column lists in store
-    setFixedColumns(['reference']);
-    
-    const navigableColumnIds = [];
-    if (showCrossRefs) navigableColumnIds.push('KJV', 'CrossRefs');
-    else navigableColumnIds.push('KJV');
-    
-    if (showNotes) navigableColumnIds.push('Notes');
-    if (showProphecies) {
-      navigableColumnIds.push('Prediction', 'Fulfillment', 'Verification');
-    }
-    
-    setNavigableColumns(navigableColumnIds);
+  useEffect(() => {
+    // Fixed: keep the reference column pinned
+    setFixedColumns(['reference']);
+
+    // Canonical IDs that match data-col-key / header ids
+    const nav: string[] = ['main-translation'];
+    if (showCrossRefs) nav.push('cross-refs');
+    if (showNotes)     nav.push('notes');
+    if (showProphecies) {
+      nav.push('prophecy-prediction', 'prophecy-fulfillment', 'prophecy-verification');
+    }
+
+    // Include all alternate translations as navigable columns
+    const { alternates, main } = useTranslationMaps();
+    alternates
+      .filter(code => code !== main)
+      .forEach(code => nav.push(`alt-translation-${code}`));
+
+    setNavigableColumns(nav);
@@
-    setTimeout(() => {
+    setTimeout(() => {
       const measureColumns = () => {
         // Measure reference column
         const refEl = document.querySelector('[data-column="reference"]');
         if (refEl) {
           setColumnWidthPx('reference', refEl.getBoundingClientRect().width);
         }
         
-        // Measure main translation column
-        const kjvEl = document.querySelector('[data-column="main-translation"]');
-        if (kjvEl) {
-          setColumnWidthPx('KJV', kjvEl.getBoundingClientRect().width);
-        }
+        // Measure main translation column
+        const mainEl = document.querySelector('[data-column="main-translation"]');
+        if (mainEl) setColumnWidthPx('main-translation', mainEl.getBoundingClientRect().width);
         
         // Measure cross refs column
         if (showCrossRefs) {
-          const crossEl = document.querySelector('[data-column="cross-refs"]');
-          if (crossEl) {
-            setColumnWidthPx('CrossRefs', crossEl.getBoundingClientRect().width);
-          }
+          const crossEl = document.querySelector('[data-column="cross-refs"]');
+          if (crossEl) setColumnWidthPx('cross-refs', crossEl.getBoundingClientRect().width);
         }
         
         // Measure prophecy columns
         if (showProphecies) {
           const predEl = document.querySelector('[data-column="prophecy-prediction"]');
           const fulfEl = document.querySelector('[data-column="prophecy-fulfillment"]');
           const verifEl = document.querySelector('[data-column="prophecy-verification"]');
-          if (predEl) setColumnWidthPx('Prediction', predEl.getBoundingClientRect().width);
-          if (fulfEl) setColumnWidthPx('Fulfillment', fulfEl.getBoundingClientRect().width);
-          if (verifEl) setColumnWidthPx('Verification', verifEl.getBoundingClientRect().width);
+          if (predEl)  setColumnWidthPx('prophecy-prediction', predEl.getBoundingClientRect().width);
+          if (fulfEl)  setColumnWidthPx('prophecy-fulfillment', fulfEl.getBoundingClientRect().width);
+          if (verifEl) setColumnWidthPx('prophecy-verification', verifEl.getBoundingClientRect().width);
         }
+
+        // Measure all alternate translations
+        document.querySelectorAll<HTMLElement>('[data-column="alt-translation"]').forEach(el => {
+          const id = el.getAttribute('data-col-key');  // e.g., alt-translation-NKJV
+          if (id) setColumnWidthPx(id, el.getBoundingClientRect().width);
+        });
       };
       measureColumns();
     }, 100);
   }, [showCrossRefs, showProphecies, showNotes, setFixedColumns, setNavigableColumns, setColumnWidthPx]);
```

(Where the old version used “KJV / CrossRefs / Prediction…”, this uses the same IDs as `NewColumnHeaders` & `VirtualRow`.) &#x20;

---

### C) `index.css` — split main vs alt widths; add sticky for “#”

1. **Replace the broad translation selector** so ALTs use their own var:

```diff
- .column-header-cell[data-column="main"],
- .column-header-cell[data-column*="translation"]:not([data-column="reference"]) {
-   width: var(--adaptive-main-width);
-   min-width: var(--adaptive-main-width);
-   max-width: var(--adaptive-main-width);
- }
+ /* Main translation only */
+ .column-header-cell[data-column="main-translation"] {
+   width: var(--adaptive-main-width);
+   min-width: var(--adaptive-main-width);
+   max-width: var(--adaptive-main-width);
+ }
+ /* Alt translations */
+ .column-header-cell[data-column="alt-translation"] {
+   width: var(--adaptive-alt-width);
+   min-width: var(--adaptive-alt-width);
+   max-width: var(--adaptive-alt-width);
+ }
```

(Your current rule applies “main” width to *all* translations, which mis-sizes alt headers.)&#x20;

2. **Pin the reference column (header + rows):**

```css
/* Keep # column always visible */
.column-header-cell[data-column="reference"],
.bible-column[data-column="reference"] {
  position: sticky;
  left: 0;
  z-index: 5; /* above neighbors */
  background: var(--header-bg, var(--background));
}
```

---

### D) `mobile-headers.css` — use the real main key

```diff
- .column-header-cell[data-column="main"] {
+ .column-header-cell[data-column="main-translation"] {
   /* existing width/overflow rules */
 }
```

(Do this for each occurrence targeting `"main"`.)&#x20;

---

### E) (Optional but wise) `columnLayout.ts` — align the cross-refs id

If you still reference this layout map anywhere, update the id to match the live system:

```diff
- id: 'cross-references',
+ id: 'cross-refs',
```



---

## Why this resolves your list

* **“One unified column changer”:** The canonical IDs (`reference`, `main-translation`, `alt-translation-<code>`, `cross-refs`, `prophecy-*`, `notes`) are now used consistently in headers, rows, CSS, and the nav list. `VirtualBibleTable` now feeds the same IDs the arrows/scroller expect, including *all* alternates.

* **0–20 slot track & reordering:** You’re already mapping slots in store/rows; the ID normalization removes the drift that looked like “reordering is broken.” (See slot-to-width logic used by rows and headers.) &#x20;

* **Headers equal width & perfectly above their columns:** Main vs alt widths now use the correct vars on **both** header and cells. No more “quarter-column” shift when an alt appears. &#x20;

* **Alt translation columns included in horizontal click nav:** The nav list now includes `alt-translation-*` keys, so arrows snap correctly through alts. &#x20;

* **“#” column can’t be pushed off screen:** The new sticky-left CSS pins it in both header and body.

---

## 30-second verification checklist

1. Toggle on one or more alternates; confirm header + row widths stay locked (no drift).
2. Click the right arrow until it cycles through `main-translation` → `cross-refs` (if on) → `prophecy-*` (if on) → **every** `alt-translation-*` you enabled; verify smooth snap each time.
3. Drag/reorder headers (if enabled); verify the `#` stays pinned and the arrows still snap to the active order.
4. On mobile/portrait, confirm the main header width now applies (was “main” before, now `main-translation`).&#x20;

If you want, I can also fold these IDs into a tiny `ColumnId` type and expose a helper (e.g., `isAlt(id)`, `toColId(type, code)`) so no future component can reintroduce “cross-references” vs “cross-refs.”
