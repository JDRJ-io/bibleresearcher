Below is a focused recipe for one-axis-at-a-time scrolling on mobile portrait that keeps the feel snappy and uses almost no JavaScript.

⸻

1 · DOM slices (portrait only)

<section className="biblePage">          {/* vertical scroll container */}
  <header>{/* … */}</header>

  {/* horizontal scroller that holds the whole table */}
  <div className="tableWrapper">
    <div className="tableInner">{/* ColumnHeaders + VirtualRows */}</div>
  </div>
</section>

	•	biblePage scrolls only up/down.
	•	tableWrapper scrolls only left/right.
Because the two are nested, we need to stop their scroll gestures from leaking into each other.

⸻

2 · Axis-lock with pure CSS

/* -------------- vertical page ----------------- */
.biblePage {
  overflow-y: auto;
  overflow-x: hidden;
  height: 100dvh;                   /* full viewport */
  touch-action: pan-y pinch-zoom;   /* ❯ allow Y-panning only */
  overscroll-behavior: contain;     /* no scroll chaining */
}

/* -------------- horizontal table -------------- */
.tableWrapper {
  display: flex;
  overflow-x: auto;                 /* shows bar only if needed */
  overflow-y: hidden;
  touch-action: pan-x pinch-zoom;   /* ❯ allow X-panning only */
  overscroll-behavior: contain;     /* stop bounce from bubbling up */
  scroll-snap-type: x mandatory;    /* neat column snap */
  -webkit-overflow-scrolling: touch;/* momentum on iOS */
}

.tableInner { inline-size: max-content; }

.columnGroup { scroll-snap-align: start; } /* every column bundle */

Why it works
	•	touch-action tells the browser to accept just one pan direction for that element, so diagonal finger moves no longer “bleed” the other axis.  ￼
	•	overscroll-behavior: contain prevents the vertical scroll from continuing on the body when a user hits the ends of the tableWrapper (or vice-versa).  ￼
	•	scroll-snap-type: x mandatory finishes horizontal drags on clean column boundaries, making it feel intentional rather than floaty.  ￼

Because everything happens in the compositor, you get 60 fps on even mid-range phones—no JS hit-testing loop needed.

⸻

3 · Edge cases & progressive enhancement

Case	What to add
Users on iOS 12 & earlier (no pointer-events)	The CSS above still works; touch-action has been honoured since iOS 11.
Track-pad “wheel” events on tablets	Listen for "wheel" in tableWrapper; if `
Dynamic column adds/removals	Keep the ResizeObserver snippet from my previous message; the axis-lock CSS doesn’t change.
Accessibility / reduced-motion	Wrap the scroll-snap-type rule in @media (prefers-reduced-motion: no-preference) if strict snapping bothers some users.



⸻

4 · Hook to flip the rules in landscape

You already have useOrientation(). In VirtualBibleTable just add:

const orientation = useOrientation();
const isPortrait = orientation === 'portrait';

return (
  <div
    className={`tableWrapper ${isPortrait ? 'twPortrait' : 'twLandscape'}`}
    ref={wrapperRef}
  >
    …

…and put any portrait-only tweaks (smaller fonts, etc.) under .twPortrait in the CSS. The axis-lock rules stay identical for both orientations.

⸻

TL;DR
	•	touch-action: pan-y on the outer container, pan-x on the inner = instant one-direction scrolling, zero JS.
	•	overscroll-behavior: contain kills scroll-chain bounce.
	•	scroll-snap-type gives that “card deck” glide with no performance hit.

Wire those three properties together and your mobile portrait mode will feel locked-in and buttery-smooth while still letting users flick left/right through extra columns when they need them.