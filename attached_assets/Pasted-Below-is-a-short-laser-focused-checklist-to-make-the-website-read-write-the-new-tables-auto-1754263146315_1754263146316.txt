Below is a **short, laser-focused checklist** to make the *website* read & write the new tables automatically.
Nothing more to change in SQL—your database is fine.
Three things must be fixed in the **front-end**:

| # | Symptom you saw                       | Root cause                                                                                                                |
| - | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |
| 1 | Profile form still blank / can’t save | UI is calling an old API route (`/api/users/profile`) that no longer exists, **or** it never receives your Supabase keys. |
| 2 | Dev code returns nothing              | Browser isn’t sending your session cookie when it calls the edge function (wrong URL or `credentials` flag missing).      |
| 3 | You had to run console commands       | Because the UI pieces above aren’t wired; the console proved the DB works.                                                |

Follow the steps **in order**. After each step, reload the page and test before moving on.

---

## ① Expose Supabase keys to the browser (1 minute)

1. **Replit** → **Secrets** panel
2. Add / verify:

```
NEXT_PUBLIC_SUPABASE_URL   https://<project>.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY   pk_...
```

*(These must match exactly what the Dashboard shows under **Project Settings → API**.)*

3. **Stop & restart** the Replit server so env vars are in the build.

✅ Reload `/profile` – the Network tab should now show requests to `…supabase.co/rest/v1/profiles`.

If you still see no such request, continue to step ②.

---

## ② Replace old fetches with direct Supabase calls (5 min)

Create **`lib/supabaseBrowser.ts`** (once):

```ts
import { createBrowserSupabaseClient } from '@supabase/auth-helpers-nextjs';
export const supabase = createBrowserSupabaseClient();
```

### 2-A Profile load / save

```ts
// hooks/useMyProfile.ts
import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabaseBrowser';

export function useMyProfile() {
  const [profile, setProfile] = useState<any>(null);

  useEffect(() => {
    (async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      const { data } = await supabase
        .from('profiles')
        .select('name,bio,tier')
        .eq('id', user.id)
        .single();
      setProfile(data);
    })();
  }, []);

  async function save(update: {name: string; bio: string}) {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('Not signed in');
    await supabase.from('profiles').update(update).eq('id', user.id);
    setProfile({ ...profile, ...update });
  }

  return { profile, save };
}
```

Use it inside your Profile component:

```tsx
const { profile, save } = useMyProfile();
<input value={profile?.name ?? ''} … />
<button onClick={() => save({name, bio})}>Save</button>
```

✅ Reload, change Bio → click Save → Network shows `PATCH …/profiles…` 200 → refresh page, new bio appears.

---

### 2-B Dev-code redeem button

```tsx
async function redeem(code: string) {
  const res = await fetch('/functions/v1/redeem-code', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    credentials: 'include',          // ★ send session cookie
    body: JSON.stringify({ code }),
  });
  const { message } = await res.json();
  alert(message);
  if (res.ok) location.reload();
}
```

Use `/functions/v1/redeem-code` **without** the project ref—same origin keeps cookies.

✅ Enter `DEV-ALPHA-2025` → alert “ok” → page reload → Profile tier shows **premium**.

---

## ③ Hide DevTools in production (30 sec)

```tsx
if (process.env.NEXT_PUBLIC_SHOW_DEVTOOLS !== 'true') {
  return <NotFound />;   // 404 for normal visitors
}
```

Set `NEXT_PUBLIC_SHOW_DEVTOOLS=true` only in your **personal** Secrets when you need access. Omit it in Vercel / Netlify prod env.

---

## ④ Quick smoke test

| Action                            | Expected                          |
| --------------------------------- | --------------------------------- |
| Sign out → sign in new e-mail     | Profile auto-creates, tier = free |
| Edit name / bio → Save            | persists after refresh            |
| Navigate to `/dev` (without flag) | 404 page                          |
| Add flag & redeem dev code        | tier flips to premium             |

If *any* row fails, copy the Network request (URL + status + JSON) or the exact console error—you’ll get a single-line fix.
